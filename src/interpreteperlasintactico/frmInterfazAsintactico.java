/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interpreteperlasintactico;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author esteban
 */
public class frmInterfazAsintactico extends javax.swing.JFrame {

    /**
     * Creates new form frmInterfazAsintactico
     */
    public frmInterfazAsintactico() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnGenerar = new javax.swing.JButton();
        btnEjecutar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        btnAbrir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaResultado = new javax.swing.JTextArea();
        btnVerErrores = new javax.swing.JButton();
        btnVerListaTokens = new javax.swing.JButton();
        btnResultado = new javax.swing.JButton();
        btnTablaSimbolos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        jLabel1.setText("Archivo:");

        btnAbrir.setText("Abrir");

        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        txaResultado.setColumns(20);
        txaResultado.setRows(5);
        jScrollPane1.setViewportView(txaResultado);

        btnVerErrores.setText("Errores");
        btnVerErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerErroresActionPerformed(evt);
            }
        });

        btnVerListaTokens.setText("Lista de Tokens");
        btnVerListaTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerListaTokensActionPerformed(evt);
            }
        });

        btnResultado.setText("Resultado");
        btnResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResultadoActionPerformed(evt);
            }
        });

        btnTablaSimbolos.setText("Tabla de Simbolos");
        btnTablaSimbolos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTablaSimbolosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAbrir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnGenerar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(btnVerErrores, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnVerListaTokens)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnTablaSimbolos)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnResultado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir)
                    .addComponent(btnEjecutar)
                    .addComponent(btnGenerar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAbrir)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnResultado)
                    .addComponent(btnVerListaTokens)
                    .addComponent(btnVerErrores)
                    .addComponent(btnTablaSimbolos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        // TODO add your handling code here:
        txaResultado.append("\n*** Generando ***\n");
        String archLexico = "";
        String archSintactico = "";

        archLexico = "alexico.flex";
        archSintactico = "asintactico.cup";

        String[] alexico = {archLexico};
        String[] asintactico = {"-parser", "AnalizadorSintactico", archSintactico};
        jflex.Main.main(alexico);
        try
        {
            java_cup.Main.main(asintactico);
        }
        catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        //movemos los archivos generados
        boolean mvAL = moverArch("AnalizadorLexico.java");
        boolean mvAS = moverArch("AnalizadorSintactico.java");
        boolean mvSym= moverArch("sym.java");

        txaResultado.append("Generado!");
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        txaResultado.setText("");
        // EN CASO DE ERROR ACA BORRAR ESTO --------------------------------------
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("error.out"));
            bw.write("");
            bw.close();
        } catch (IOException e) {}

        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("Interprete.asm"));
            bw.write("");
            bw.close();
        } catch (IOException e) {
            System.out.println("Error al limpiar Interprete.asm");
        }
        // ------------------------------------------------------------------------
        for(String token: ejecutar())
        {
            txaResultado.append(token.toString()+"\n");
        }

        try {
            BufferedWriter out = new BufferedWriter(new FileWriter("error.out"));
        } catch (IOException ex) {

        }

    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnVerErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerErroresActionPerformed
        txaResultado.setText("");
        for(String token: ejecutar())
        {
            txaResultado.append(token.toString()+"\n");
        }
         try {
            BufferedWriter out = new BufferedWriter(new FileWriter("error.out"));
        } catch (IOException ex) {
            Logger.getLogger(frmInterfazAsintactico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnVerErroresActionPerformed

    private void btnVerListaTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerListaTokensActionPerformed
        txaResultado.setText("");
        for(String token: obtenerListaTokens())
        {
            txaResultado.append(token.toString()+"\n");
        }
    }//GEN-LAST:event_btnVerListaTokensActionPerformed

    private void btnResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResultadoActionPerformed
        File f = new File("error.out");
        if(f.length()==0) {
            txaResultado.setText("");
            respuesta = "";
            error = false;
            calcular(tablaAux);
            if (error) {
                FileReader fr = null;
                try {
                    fr = new FileReader("error.out");
                    BufferedReader b = new BufferedReader(fr);
                    try {
                        txaResultado.append(b.readLine());
                        b.close();
                        fr.close();
                    } catch (IOException e) {
                    }
                } catch (FileNotFoundException e) {}
            //    txaResultado.append("Error Semantico.");
            } else {
            txaResultado.append(respuesta);
            }
        }
        else{
            for(String token: ejecutar())
            {
                txaResultado.append(token.toString()+"\n");
            }
            try {
                BufferedWriter out = new BufferedWriter(new FileWriter("error.out"));
            } catch (IOException ex) {
                Logger.getLogger(frmInterfazAsintactico.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnResultadoActionPerformed

    private void btnTablaSimbolosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTablaSimbolosActionPerformed
        txaResultado.setText("");
        Enumeration<String> keys = tablaSimbolos.keys();
        while (keys.hasMoreElements()) {
            String k = keys.nextElement();
            Hashtable<String,String> aux = tablaSimbolos.get(k);
            //String v = tablaSimbolos.get(k);
            Enumeration<String> key = aux.keys();
            String t = key.nextElement();
            String v = aux.get(t);
            txaResultado.append(k + " = " + t + " = " + v + "\n");
        }
    }//GEN-LAST:event_btnTablaSimbolosActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        JFileChooser fileChooser = new JFileChooser(); // Aca se pone la ruta donde quiere que abra el fileChooser
        fileChooser.showOpenDialog(this);
        File file = fileChooser.getSelectedFile();
        txtPath.setText(file.getName());
    }//GEN-LAST:event_btnAbrirActionPerformed

    public static boolean moverArch(String archNombre) {
        boolean efectuado = false;
        File arch = new File(archNombre);
        if (arch.exists())
        {
            System.out.println("\n*** Moviendo " + arch + " \n***");
            Path currentRelativePath = Paths.get("");
            String nuevoDir = currentRelativePath.toAbsolutePath().toString()
                    + File.separator + "src" + File.separator
                    + "interpreteperlasintactico" + File.separator + arch.getName();
            File archViejo = new File(nuevoDir);
            archViejo.delete();
            if (arch.renameTo(new File(nuevoDir))) {
                System.out.println("\n*** Generado " + archNombre + "***\n");
                efectuado = true;
            } else {
                System.out.println("\n*** No movido " + archNombre + " ***\n");
            }

        } else {
            System.out.println("\n*** Codigo no existente ***\n");
        }
        return efectuado;
    }

    private ArrayList<String> ejecutar() {
        String[] archivoPrueba = {txtPath.getText()};
        //AnalizadorSintactico.main(archivoPrueba);
        txaResultado.setText("");
        String salida = "error.out";
        ArrayList<String> listaTokens = new ArrayList<String>();
        BufferedReader bf = null;
        Yytoken token = null;
        tablaAux = new ArrayList<>();
        try
        {
            bf = new BufferedReader(new FileReader(salida));
            String[] archivoError = {txtPath.getText()};
            //AnalizadorSintactico.main(archivoPrueba);
            // Lectura del fichero
            String linea;
            while((linea=bf.readLine())!=null) {
                listaTokens.add(linea);
            }
        }
        catch (Exception ex)
        {
            System.out.println("error");
        }

        return listaTokens;

    }

    private ArrayList<String> obtenerListaTokens() {
        txaResultado.setText("");
        String salida = "file.out";
        ArrayList<String> listaTokens = new ArrayList<String>();
        BufferedReader bf = null;
        Yytoken token = null;
        try
        {
            bf = new BufferedReader(new FileReader(salida));
            String[] archivoPrueba = {txtPath.getText()};
            AnalizadorSintactico.main(archivoPrueba);
            // Lectura del fichero
            String linea;
            while((linea=bf.readLine())!=null) {
                //-------------------------------------------------
                String[] arr = linea.split(" ");
                if(arr.length<=6){
                    tablaAux.add(arr[4]+"-"+arr[2]);
                }
                else{
                    String s = "";
                    int cnt = 2;
                    while(cnt<arr.length-2){
                        s+=arr[cnt];
                        if(cnt!=arr.length-3){
                            s+=" ";
                        }
                        cnt++;
                    }
                    tablaAux.add(arr[arr.length-2]+"-"+s);
                }
                //-------------------------------------------------
                listaTokens.add(linea);
            }
            crearTablaSimbolos();
        }
        catch (Exception ex)
        {
            System.out.println("error");
        }

        return listaTokens;

    }

    public void crearTablaSimbolos(){
        contadorPrograma=0;
        tablaSimbolos = new Hashtable<>();
        String aux;
        int cnt = 0;
        while(cnt<tablaAux.size()){
            aux = tablaAux.get(cnt);
            if(aux.contains("my")){
                cnt+=1; // Quito el my
                if(tablaAux.get(cnt).contains("$")){
                    cnt+=1; // Quito el $
                    String [] arr = tablaAux.get(cnt).split("-");
                    String k = "$"+arr[1];
                    cnt+=2; // Quito el ID=
                    String tipo = "NUMERO";
                    if(tablaAux.get(cnt).contains("STRINGCOMPLEJO")||tablaAux.get(cnt).contains("join")||tablaAux.get(cnt).contains("pop")){
                        tipo = "STRINGCOMPLEJO";
                    }
                    ArrayList<String> asignacion = new ArrayList<>();
                    while (!tablaAux.get(cnt).contains(";")){
                        asignacion.add(tablaAux.get(cnt));
                        cnt++;
                    }
                    Object valor = evaluarAsignacion(tipo,asignacion);
                    if(String.valueOf(valor).equals("Error")){ // En caso de error, borrar este if.
                        error = true;
                        contadorPrograma=tablaAux.size();
                        return;
                    }
                    Hashtable<String,String> v = new Hashtable<>();
                    v.put(tipo, String.valueOf(valor));
                    if(!tablaSimbolos.containsKey(k)){
                        tablaSimbolos.put(k,v);
                    }
                    else{
                        respuesta = "Error Semantico, la variable "+k+" ya existe";
                        cnt=tablaAux.size();
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try{
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, la variable "+k+" ya existe");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                    }

                }
                else if(tablaAux.get(cnt).contains("@")){
                    cnt+=1; // Quito el @
                    String [] arr = tablaAux.get(cnt).split("-");
                    String k = "@"+arr[1];
                    cnt+=2; // Quito el ID =
                    if(!tablaAux.get(cnt).contains("split")) {
                        cnt+=1; // Quito el [
                        String vAux = "";
                        String s = "[";
                        while (!tablaAux.get(cnt).equals("CERRARBRACKETS-]")) {
                            arr = tablaAux.get(cnt).split("-");
                            if (!arr[1].equals(",")) {
                                vAux += arr[1] + ",";
                            }
                            cnt++;
                        }
                        s += vAux.substring(0, vAux.length() - 1) + "]";
                        Hashtable<String, String> v = new Hashtable<>();
                        v.put("ARREGLO", s);
                        if (!tablaSimbolos.containsKey(k)) {
                            tablaSimbolos.put(k, v);
                        }
                        else{
                            respuesta = "Error Semantico, el arreglo "+k+" ya existe";
                            cnt=tablaAux.size();
                            error = true;
                            // Ahora escribo el error en el archivo error.out
                            File f = new File("error.out");
                            try{
                                FileWriter fw = new FileWriter(f);
                                BufferedWriter bw = new BufferedWriter(fw);
                                PrintWriter pw = new PrintWriter(bw);
                                pw.write("Error Semantico, el arreglo "+k+" ya existe");
                                pw.close();
                                bw.close();
                                fw.close();
                            } catch (IOException e) {
                                System.out.println("Error al escribir en el archivo error.out");
                            }
                        }
                        cnt+=1; // Quito el ]
                    }
                    else{
                        ArrayList<String> asignacionSplit = new ArrayList<>();
                        while(!tablaAux.get(cnt).contains(";")){
                            asignacionSplit.add(tablaAux.get(cnt));
                            cnt++;
                        }
                        //cnt+=1; // Quito el ;
                        Object val = evaluarAsignacion("ARREGLO",asignacionSplit);
                        if(String.valueOf(val).equals("Error")){ // En caso de error, borrar este if.
                            error = true;
                            contadorPrograma=tablaAux.size();
                            return;
                        }
                        Hashtable<String, String> tv = new Hashtable<>();
                        tv.put("ARREGLO", String.valueOf(val));
                        if(!tablaSimbolos.containsKey(k)) {
                            tablaSimbolos.put(k, tv);
                        }
                        else{
                            respuesta = "Error Semantico, el arreglo "+k+" ya existe";
                            cnt=tablaAux.size();
                            error = true;
                            // Ahora escribo el error en el archivo error.out
                            File f = new File("error.out");
                            try{
                                FileWriter fw = new FileWriter(f);
                                BufferedWriter bw = new BufferedWriter(fw);
                                PrintWriter pw = new PrintWriter(bw);
                                pw.write("Error Semantico, el arreglo "+k+" ya existe");
                                pw.close();
                                bw.close();
                                fw.close();
                            } catch (IOException e) {
                                System.out.println("Error al escribir en el archivo error.out");
                            }
                        }
                    }
                    contadorPrograma = cnt;
                }
                else{
                    cnt = tablaAux.size();
                }
            }
            else if ((tablaAux.get(cnt).contains("CONDICION"))||(tablaAux.get(cnt).contains("BUCLE"))
                    ||(tablaAux.get(cnt).contains("print"))||(tablaAux.get(cnt).contains("push"))||(tablaAux.get(cnt).contains("unshift"))){
                contadorPrograma=cnt;
                cnt=tablaAux.size();
            }
            cnt++;
        }
    }

    //----------------------- PARA EL CALCULO DEL RESULTADO DEL PROGRAMA (INTERPRETE) ----------------------------------
    public boolean evaluarCondicion(ArrayList<String> condicion){
        // La condicion tiene la forma $variable operador $variable � $variable operador valor
        boolean respuestaCondicion; // Resultado de la condicion
        int contadorCondicion = 0; // Contador para moverse en la condici�n
        contadorCondicion+=1; // Quito el $
        String actual = condicion.get(contadorCondicion); // Ejemplo: ID-"nombre"
        String [] arr = actual.split("-"); // Ejemplo [ID,"nombre"]
        String nombre = "$"+arr[1]; // Nombre de la variable. Ejemplo: $nombre
        if(tablaSimbolos.containsKey(nombre)) {
            Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // Para consultar tipo y valor de la variable
            Enumeration<String> keys = tipoValor.keys();
            String tipo = keys.nextElement(); // Tipo de la variable
            if (tipo.equals("NUMERO")) { // Si la varible es n�mero
                int val1; // Aca se almacenara el valor de la variable
                String op; // Aca se almacenara el operador de la condicion
                int val2; // Aca se almancenara el valor de la segunda variable
                val1 = Integer.parseInt(tipoValor.get(tipo)); // Valor de la variable
                contadorCondicion += 1; // Quito el nombre
                int posicionOperador = contadorCondicion; // Almaceno la posicion del operador dentro del arreglo
                contadorCondicion += 1; // Quito el operador
                if (condicion.get(contadorCondicion).contains("$")) { // Consulto si es variable
                    contadorCondicion += 1; // Quito el $
                    actual = condicion.get(contadorCondicion); // Nombre de la variable
                    arr = actual.split("-");
                    nombre = "$" + arr[1]; // Nombre de la variable
                    if(tablaSimbolos.containsKey(nombre)) {
                        tipoValor = tablaSimbolos.get(nombre); // Tipo y valor de la variable
                        keys = tipoValor.keys();
                        tipo = keys.nextElement(); // Tipo de la variable
                        val2 = Integer.parseInt(tipoValor.get(tipo)); // Valor de la variable
                    }
                    else{
                        respuesta+= "Error Semantico, "+nombre+" no existe.";
                        contadorCondicion = condicion.size();
                        contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, "+nombre+" no existe.");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return false;

                    }
                } else { // Si es un valor y no una variable
                    actual = condicion.get(contadorCondicion); // Ejemplo: NUMERO-9
                    arr = actual.split("-"); // Ejemplo: [NUMERO,9]
                    val2 = Integer.parseInt(arr[1]); // Asigno valor de la variable
                }
                //-------- OPERADOR ----------
                op = condicion.get(posicionOperador); // Obtengo el operador y ejecuto la condicion dependiendo de este
                if (op.contains("MAYORQUE")) {
                    respuestaCondicion = val1 > val2;
                } else if (op.contains("MENORQUE")) {
                    respuestaCondicion = val1 < val2;
                } else if (op.contains("EQUIVALENCIA")) {
                    respuestaCondicion = val1 == val2;
                } else if (op.contains("MAYORIGUALQUE")) {
                    respuestaCondicion = val1 >= val2;
                } else if (op.contains("MENORIGUALQUE")) {
                    respuestaCondicion = val1 <= val2;
                } else { //CASO != DIFERENCIA
                    respuestaCondicion = val1 != val2;
                }
            }

            // CON STRINGS
            else {
                String val1; // Aca se guarda el valor del primer string
                String op; // Aca se guarda el operador de la condicion
                String val2; // Aca se guarda el valor del segundo string
                val1 = tipoValor.get(tipo); // Valor del primer string
                contadorCondicion += 1; // Quito el nombre
                int posOperador = contadorCondicion; // Guardo la posicion del operador en el arreglo
                contadorCondicion += 1; // Quito el operador
                actual = condicion.get(contadorCondicion);
                if (actual.contains("$")) { // Si es una variable
                    contadorCondicion += 1; // Quito el $
                    actual = condicion.get(contadorCondicion); //Ejemplo: ID-"nombre"
                    arr = actual.split("-"); // Ejemplo: [ID,"nombre"]
                    nombre = "$" + arr[1]; // Nombre de la variable
                    if(tablaSimbolos.containsKey(nombre)) {
                        tipoValor = tablaSimbolos.get(nombre); // tipo y valor de la variable
                        keys = tipoValor.keys();
                        tipo = keys.nextElement(); // Tipo de la variable
                        val2 = tipoValor.get(tipo); // Valor de la variable
                    }
                    else{
                        respuesta+= "Error Semantico, "+nombre+" no existe.";
                        contadorCondicion = condicion.size();
                        contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, "+nombre+" no existe.");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return false;
                    }
                } else { // Si es un string
                    arr = actual.split("-");
                    val2 = arr[1]; // Asigno el string
                }
                //-------- OPERADOR ----------
                op = condicion.get(posOperador); // Obtengo el operador de la condicion y evaluo la condicion
                if (op.contains("EQUIVALENCIA")) {
                    respuestaCondicion = val1.equals(val2);
                } else { //CASO != DIFERENCIA
                    respuestaCondicion = !(val1.equals(val2));
                }
            }
            return respuestaCondicion;
        }
        else{
            respuesta+= "Error Semantico, "+nombre+" no existe.";
            contadorCondicion = condicion.size();
            contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
            error = true;
            // Ahora escribo el error en el archivo error.out
            File f = new File("error.out");
            try {
                FileWriter fw = new FileWriter(f);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter pw = new PrintWriter(bw);
                pw.write("Error Semantico, "+nombre+" no existe.");
                pw.close();
                bw.close();
                fw.close();
            } catch (IOException e) {
                System.out.println("Error al escribir en el archivo error.out");
            }
            return false;
        }
    }

    public void evaluarBucle(ArrayList<String> condicion, ArrayList<String> operaciones){ // Recibe la condicion y las operaciones del bucle
        while (evaluarCondicion(condicion)&&!error){ // Mientras la condicion se cumpla
               calcularResultadoBucle(operaciones); // Calcula las instrucciones
        }
    }

    public void evaluarPrint(ArrayList<String> arrPrint){ // Recibe un arreglo con los datos a imprimir
        for(int i=0;i<arrPrint.size();i++){ // Recorre el arreglo del contenido
            String contenido = arrPrint.get(i); // Toma el primer elemento del contenido. Por ejemplo: STRINGCOMPLEJO-"hola"
            String [] arrCont = contenido.split("-"); //Ejemplo: [STRINGCOMPLEJO,"hola"]
            if(contenido.contains("STRINGCOMPLEJO")){
                respuesta+=arrCont[1]; // Agrega el contenido a la respuesta del programa
            }
            else if(contenido.contains("$")){
                i+=1; // Quito el $
                contenido = arrPrint.get(i); // Ejemplo: ID-nombre
                arrCont = contenido.split("-"); // Ejemplo [ID,nombre]
                String nombre = "$"+arrCont[1]; // nombre de la variable
                if(tablaSimbolos.containsKey(nombre)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // tipo y valor de la variable en la tabla de simbolos
                    Enumeration<String> keys = tipoValor.keys();
                    String tipo = keys.nextElement(); // tipo de la variable
                    String valor = tipoValor.get(tipo); // valor de la variable
                    respuesta += valor;
                }
                else{
                    respuesta+= "Error Semantico, "+nombre+" no existe.";
                    i = arrPrint.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombre+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return;
                }
            }
            else if(contenido.contains("length")){
                Object valor = evaluarAsignacion("STRINGCOMPLEJO",arrPrint);
                if(String.valueOf(valor).equals("Error")){ // En caso de error, borrar este if.
                    error = true;
                    contadorPrograma=tablaAux.size();
                    return;
                }else{
                    respuesta+=""+valor;
                }
            }
            else if(contenido.contains("pop")){
                Object valor = evaluarAsignacion("STRINGCOMPLEJO",arrPrint);
                if(String.valueOf(valor).equals("Error")){ // En caso de error, borrar este if.
                    error=true;
                    contadorPrograma=tablaAux.size();
                    return;
                }else {
                    respuesta += "" + valor;
                }
            }
            else if(contenido.contains("shift")){
                Object valor = evaluarAsignacion("STRINGCOMPLEJO",arrPrint);
                if(String.valueOf(valor).equals("Error")){ // En caso de error, borrar este if.
                    error=true;
                    contadorPrograma=tablaAux.size();
                    return;
                }
                else{
                    respuesta+=""+valor;
                }
            }
            else{
                //System.out.println("FALTA UN CASO EN EL PRINT, CUANDO ES: "+contenido);
            }
        }
        respuesta+="\n"; // Agrego un cambio de linea a la entrada
    }

    public void evaluarSwitch(Hashtable<String, String> tipoValor, ArrayList<String> casos){
        Enumeration<String> keys = tipoValor.keys(); // En tipoValor viene el tipo y valor de la variable del switch
        String tipo = keys.nextElement(); // tipo de la variable
        Object valor = tipoValor.get(tipo);
        ArrayList<String> opCase = new ArrayList<>(); // Aca se guardaran las operaciones segun el case (o default)
        for(int i=0;i<casos.size();i++){
            if(casos.get(i).contains("case")){
                i+=1; //Quito el case
                String condicion = casos.get(i); // Ejemplo. "NUMERO"-0 � "STRINGCOMPLEJO-"hola"
                String [] arr = condicion.split("-"); // [NUMERO,0] � [STRINGCOMPLEJO,"hola"]
                if((arr[1]==valor)||(arr[1].equals(valor))){
                    i+=1; // Quito el valor o condicion
                    i+=1; // Quito el :
                    i+=1; // Quito el {
                    int cntLlaves = 1; //
                    while (cntLlaves!=0){ // Guarda hasta encontrar el }
                        if (casos.get(i).contains("{")){
                            cntLlaves++;
                        }
                        if (casos.get(i).contains("}")){
                            cntLlaves--;
                        }
                        opCase.add(casos.get(i)); // Agrega a las operaciones del case
                        i++;
                    }
                    i=casos.size();
                }
                else{
                    // En caso de que el case no "haga match", muevase hasta el proximo case o default
                    while(!casos.get(i).contains("case")&&!casos.get(i).contains("default")){
                        i++;
                    }
                    i-=2;
                }
            }
            else if(casos.get(i).contains("default")){
                while(i<casos.size()){
                    opCase.add(casos.get(i)); // Agrega a las operaciones del case
                    i++;
                }
            }
        }
        evaluarCase(opCase);
    }

    public void evaluarCase(ArrayList<String> casos){
        calcularResultadoBucle(casos);
    }

    public Object evaluarAsignacion(String tipoV, ArrayList<String> asignacion){
        // ------------- El parametro tipo es para detectar errores como asignar un string al que ya tenia un int ------
        Object resultado = "";
        int contador =0;
        while (contador<asignacion.size()){
            String actual = asignacion.get(contador);
            String[] arr = actual.split("-");
            // - EVALUAR CUANDO ASIGNA UN VALOR DIRECTAMENTE
            if(actual.contains("NUMERO")||actual.contains("STRINGCOMPLEJO")){
                resultado = arr[1]; // Asigno el valor directamente
            }
            // - EVALUAR CUANDO ES $VAR + $VAR
            else if (actual.contains("$")){
                contador+=1; // Quito el $
                actual = asignacion.get(contador);
                arr = actual.split("-");
                String nombre = "$"+arr[1];
                if(tablaSimbolos.containsKey(nombre)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre);
                    Enumeration<String> keys = tipoValor.keys();
                    String tipo = keys.nextElement(); // tipo de la variable
                    String tipoVar1 = tipo;
                    resultado = tipoValor.get(tipo); // Resultado parcial (puede ser total)
                    contador += 1; //Quito el ID
                    int posOperador = contador;
                    if ((asignacion.get(contador).equals("MAS-+")) || (asignacion.get(contador).equals("MENOS--"))) {
                        contador += 1; // Quito el +
                        actual = asignacion.get(contador);
                        arr = actual.split("-");
                        if (arr[1].equals("$")) {
                            contador += 1; //Quito el $
                            actual = asignacion.get(contador);
                            arr = actual.split("-");
                            nombre = "$" + arr[1];
                            if(tablaSimbolos.containsKey(nombre)) {
                                tipoValor = tablaSimbolos.get(nombre);
                                keys = tipoValor.keys();
                                tipo = keys.nextElement();
                            }
                            else{
                                respuesta+= "Error Semantico, "+nombre+" no existe.";
                                respuesta+="\n";
                                contador = asignacion.size();
                                contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try {
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, "+nombre+" no existe.");
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                                return "Error";
                            }
                            String tipoVar2 = tipo;
                            if (tipoVar1.equals(tipoVar2)) {
                                if (tipo.equals("NUMERO")) {
                                    if (asignacion.get(posOperador).equals("MENOS--")) {
                                        resultado = (Integer.parseInt(String.valueOf(resultado))) - (Integer.parseInt(tipoValor.get(tipo)));
                                    } else {
                                        resultado = (Integer.parseInt(String.valueOf(resultado))) + (Integer.parseInt(tipoValor.get(tipo)));
                                    }
                                } else {
                                    String parcial = String.valueOf(resultado);
                                    resultado = parcial + tipoValor.get(tipo);
                                }
                            } else {
                                resultado = "Error";
                                contador = asignacion.size();
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try {
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, tipos de datos distintos: " + tipoVar1 + " " + tipoVar2);
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                            }
                            contador += 2; // Quito el ID;
                        } else {
                            tipo = arr[0];
                            String tipoVar2 = tipo;
                            if (tipoVar1.equals(tipoVar2)) {
                                if (tipo.equals("NUMERO")) {
                                    if (asignacion.get(posOperador).equals("MENOS--")) {
                                        resultado = (Integer.parseInt(String.valueOf(resultado))) - (Integer.parseInt(arr[1]));
                                    } else {
                                        resultado = (Integer.parseInt(String.valueOf(resultado))) + (Integer.parseInt(arr[1]));
                                    }
                                } else {
                                    String parcial = String.valueOf(resultado);
                                    resultado = parcial + (arr[1]);
                                }
                            } else {
                                resultado = "Error";
                                contador = asignacion.size();
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try {
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, tipos de datos distintos: " + tipoVar1 + " " + tipoVar2);
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                            }
                        }
                    }
                    else{
                        //System.out.println("FALTA UN CASO EN LA ASIGNACION, CUANDO ES: "+actual);
                    }
                }
                else{
                    respuesta += "Error Semantico, "+nombre+" no existe.";
                    respuesta +="\n";
                    contador = asignacion.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombre+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return "Error";
                }
            }
            else if(actual.contains("length")){ // Caso $var = length(@arreglo);
                contador+=3; // Quito el length(@
                actual = asignacion.get(contador);
                arr = actual.split("-");
                String nombre = "@"+arr[1]; // nombre del arreglo
                if(tablaSimbolos.containsKey(nombre)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // tipo y valor del arreglo
                    Enumeration<String> keys = tipoValor.keys();
                    String tipo = keys.nextElement(); // tipo ARREGLO
                    String arreglo = tipoValor.get(tipo); // valor del arreglo. Ejemplo: ["a","b","c"]
                    arreglo = arreglo.substring(1, arreglo.length() - 1); // valores del arreglo. Ejemplo: "a","b","c"
                    arr = arreglo.split(","); // Ejemplo: ["a","b","c"]
                    resultado = arr.length; // Tama�o del arreglo
                }
                else{
                    respuesta+= "Error Semantico, "+nombre+" no existe.";
                    contador = asignacion.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombre+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return "Error";
                }
                contador+=3; // Quito el ID);
            }
            else if(actual.contains("pop")){ // Caso $var = pop(@arreglo);
                contador+=3; // Quito el pop(@
                actual = asignacion.get(contador);
                arr = actual.split("-");
                String nombre = "@"+arr[1]; // nombre del arreglo
                if(tablaSimbolos.containsKey(nombre)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // tipo y valor del arreglo
                    Enumeration<String> keys = tipoValor.keys();
                    String tipo = keys.nextElement(); // tipo ARREGLO
                    String arreglo = tipoValor.get(tipo); // valor del arreglo. Ejemplo: ["a","b","c"]
                    arreglo = arreglo.substring(1, arreglo.length() - 1); // valores del arreglo. Ejemplo: "a","b","c"
                    arr = arreglo.split(","); // Ejemplo: ["a","b","c"]
                    if (arr.length > 0) {
                        resultado = arr[arr.length - 1]; // Toma el "c" que es el ultimo valor del arreglo
                        arreglo = "[";
                        for (int i = 0; i < arr.length - 1; i++) { // Formo el arreglo en String
                            arreglo += arr[i] + ",";
                        }
                        if (arr.length > 1) { // Quito la , del final si el arreglo luego del pop aun tiene elementos
                            arreglo = arreglo.substring(0, arreglo.length() - 1);
                        }
                        arreglo += "]"; // Agrego el ] del arreglo
                        tipoValor.put(tipo, arreglo);
                        tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                    } else {
                        System.out.println("Arreglo (" + nombre + ") esta vac�o.");
                    }
                    contador += 3; // Quito el ID);
                }
                else{
                    respuesta+= "Error Semantico, "+nombre+" no existe.";
                    contador = asignacion.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombre+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return "Error";
                }
            }
            else if(actual.contains("shift")){ // Caso $var = shift(@arreglo);
                contador+=3; // Quito el shift(@
                actual = asignacion.get(contador);
                arr = actual.split("-");
                String nombre = "@"+arr[1]; // nombre del arreglo
                if(tablaSimbolos.containsKey(nombre)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // tipo y valor del arreglo
                    Enumeration<String> keys = tipoValor.keys();
                    String tipo = keys.nextElement(); // tipo ARREGLO
                    String arreglo = tipoValor.get(tipo); // valor del arreglo. Ejemplo: ["a","b","c"]
                    arreglo = arreglo.substring(1, arreglo.length() - 1); // valores del arreglo. Ejemplo: "a","b","c"
                    arr = arreglo.split(","); // Ejemplo: ["a","b","c"]
                    if (arr.length > 0) {
                        resultado = arr[0]; // Toma el "a" que es el primer valor del arreglo
                        arreglo = "[";
                        for (int i = 1; i < arr.length; i++) { // Formo el arreglo en String
                            arreglo += arr[i] + ",";
                        }
                        if (arr.length > 1) { // Quito la , del final si el arreglo luego del shift aun tiene elementos
                            arreglo = arreglo.substring(0, arreglo.length() - 1);
                        }
                        arreglo += "]"; // Agrego el ] del arreglo
                        tipoValor.put(tipo, arreglo);
                        tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                    } else {
                        System.out.println("Arreglo (" + nombre + ") esta vac�o.");
                    }
                    contador += 3; // Quito el ID);
                }
                else{
                    respuesta+= "Error Semantico, "+nombre+" no existe.";
                    contador = asignacion.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombre+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return "Error";
                }
            }
            else if(actual.contains("split")) { // Caso @arr = split($string,patron);
                contador+=3; // Quito el split($
                actual = asignacion.get(contador); //Ejemplo: ID-nombre
                arr = actual.split("-"); // [ID,nombre]
                String nombreVar = "$"+arr[1]; // $nombre <- nombre del String a hacer split
                if(tablaSimbolos.containsKey(nombreVar)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombreVar);
                    Enumeration<String> keys = tipoValor.keys();
                    String tipoVar = keys.nextElement();
                    String valorVar = tipoValor.get(tipoVar); // valor del string
                    contador += 2; // Quito el ID,
                    actual = asignacion.get(contador); // Ejemplo: STRINGCOMPLEJO-"&"
                    arr = actual.split("-");// Ejemplo: [STRINGCOMPLEJO,"&"]
                    String pSplit = arr[1];  // "&"
                    String[] arrSplit = valorVar.split(String.valueOf(pSplit.charAt(1)));
                    String arreglo = "";
                    for (int i = 0; i < arrSplit.length; i++) {
                        arreglo += "\"" + arrSplit[i] + "\"" + ","; // Formo el String del arreglo
                    }
                    arreglo = "[" + arreglo.substring(1, arreglo.length() - 2) + "]"; // Quito la , sobrante y agrego el ]
                    contador += 2; // Quito el patron)
                    resultado = arreglo; // Devuelvo el arreglo en String como resultado
                }
                else{
                    respuesta+= "Error Semantico, "+nombreVar+" no existe.";
                    contador = asignacion.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombreVar+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return "Error";
                }
            }
            else if(actual.contains("join")) { // Caso $string = join(@arr,patron);
                contador+=3; // Quito el join(@
                actual = asignacion.get(contador); //Ejemplo: ID-nombre
                arr = actual.split("-"); // [ID,nombre]
                String nombreArr = "@"+arr[1]; // @nombre <- nombre del arreglo
                if(tablaSimbolos.containsKey(nombreArr)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombreArr);
                    Enumeration<String> keys = tipoValor.keys();
                    String tipoArr = keys.nextElement();
                    String valorArr = tipoValor.get(tipoArr); // valor del arreglo
                    contador += 2; // Quito el ID,
                    actual = asignacion.get(contador); // Ejemplo: STRINGCOMPLEJO-"&"
                    arr = actual.split("-");// Ejemplo: [STRINGCOMPLEJO,"&"]
                    String pJoin = arr[1];  // "&"
                    String str = valorArr.substring(1, valorArr.length() - 1); // Quito el [ y el ]. Tengo "a","b","c"
                    str = str.replaceAll("\",\"", String.valueOf(pJoin.charAt(1))); // Reemplazo todas las , por el patron.
                    contador += 2; // Quito el patron)
                    resultado = str; // Devuelvo el String como resultado
                }
                else{
                    respuesta+= "Error Semantico, "+nombreArr+" no existe.";
                    contador = asignacion.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombreArr+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return "Error";
                }
            }
            /*else{ CUALQUIER OTRO CASO VA ACA
            }*/
            contador++;
        }
        return resultado;
    }

    public boolean evaluarCondicionForeach(String nombreVar, String nombreArr){
        if(tablaSimbolos.containsKey(nombreArr)) {
            Hashtable<String, String> tipoValor = tablaSimbolos.get(nombreArr); //Tipo y valor del arreglo
            Enumeration<String> keys = tipoValor.keys();
            String tipo = keys.nextElement(); // ARREGLO
            String arr = tipoValor.get(tipo); // Valor del arreglo en la tabla de simbolos
            boolean vacio = false;
            try {
                arr = arr.substring(1, arr.length() - 1);
            } // Ejemplo: "a","b","c"
            catch (Exception e) {
                vacio = true;
            }
            String[] arreglo = arr.split(","); // ["a","b","c"]
            if (!vacio) {
                arr = "[";
                String valorVar = arreglo[0]; // Valor de la variable recorrida
                for (int i = 1; i < arreglo.length; i++) {
                    arr += "" + arreglo[i] + ",";
                }
                arr = arr.substring(0, arr.length() - 1) + "]";

                Hashtable<String, String> tipoV = new Hashtable<>();
                tipoV.put("STRINGCOMPLEJO", valorVar);
                tablaSimbolos.put(nombreVar, tipoV); // Modifico la variable en la tabla de simbolos

                tipoValor.put(tipo, arr);
                tablaSimbolos.put(nombreArr, tipoValor); // Modifico el arreglo en la tabla de simbolos

                return true;
            } else {
                tipoValor.put(tipo, "[]");
                tablaSimbolos.put(nombreArr, tipoValor); // Modifico el arreglo en la tabla de simbolos
                return false;
            }
        }
        else{
            respuesta+= "Error Semantico, "+nombreArr+" no existe.";
            // = arrPrint.size();
            contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
            error = true;
            // Ahora escribo el error en el archivo error.out
            File f = new File("error.out");
            try {
                FileWriter fw = new FileWriter(f);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter pw = new PrintWriter(bw);
                pw.write("Error Semantico, "+nombreArr+" no existe.");
                pw.close();
                bw.close();
                fw.close();
            } catch (IOException e) {
                System.out.println("Error al escribir en el archivo error.out");
            }
            return false;
        }
    }

    public void evaluarForeach(ArrayList<String> condicionForeach, ArrayList<String> opForeach){
        String actual = condicionForeach.get(1); // Ejemplo: ID-nombre
        String [] arr = actual.split("-"); // Ejemplo: [ID,nombre]
        String nombreVar = "$"+arr[1]; // Nombre de la variable
        String tipo = "STRINGCOMPLEJO";
        String valor = " ";
        Hashtable<String,String> tipoValor = new Hashtable<>();
        tipoValor.put(tipo,valor);
        actual = condicionForeach.get(4);
        arr = actual.split("-");
        String nombreArr = "@"+arr[1];
        if(!tablaSimbolos.containsKey(nombreVar)) {
            tablaSimbolos.put(nombreVar, tipoValor);
            while (evaluarCondicionForeach(nombreVar, nombreArr)) {
                calcularResultadoBucle(opForeach);
            }
        }
        else{
            respuesta = "Error Semantico, la variable "+nombreVar+" ya existe";
            contadorPrograma = tablaAux.size(); // ESTO PODRIA SE UN ERROR
            error = true;
            // Ahora escribo el error en el archivo error.out
            File f = new File("error.out");
            try{
                FileWriter fw = new FileWriter(f);
                BufferedWriter bw = new BufferedWriter(fw);
                PrintWriter pw = new PrintWriter(bw);
                pw.write("Error Semantico, la variable "+nombreVar+" ya existe");
                pw.close();
                bw.close();
                fw.close();
            } catch (IOException e) {
                System.out.println("Error al escribir en el archivo error.out");
            }
        }
    }

    public void calcular(ArrayList<String> lista){
        // EN CASO DE ERROR ACA, QUITAR LA CONDICION DE !error
        while (contadorPrograma<lista.size()&&(!error)) {
            calcularResultado(lista);
        }
    }

    public void iniciarParametros(ArrayList<String> parametros,ArrayList<String> paramLlamado,ArrayList<String> operaciones){
        Hashtable<String,Hashtable<String,String>> tablaSimbolosAux = new Hashtable<>();
        tablaSimbolosAux.putAll(tablaSimbolos);
        int cntParam = 0;
        int cntParamLlamado = 0;
        while(cntParam<parametros.size()){
            cntParam+=1; // Quito el $
            String param = parametros.get(cntParam); // Ejemplo: ID-nombre
            String parametroLlamado = paramLlamado.get(cntParamLlamado); //Ejemplo: NUMERO-9
            String [] arrParam = param.split("-"); // Ejemplo: [ID,nombre]
            String [] arrParamLlamado = parametroLlamado.split("-"); // Ejemplo: [NUMERO,9]
            String nombreParam = "$"+arrParam[1]; // Nombre del parametro
            String tipo =arrParamLlamado[0]; // Tipo del valor a asignar al parametro
            String val = arrParamLlamado[1]; // Valor a asignar al parametro
            Hashtable<String,String> tipoValor = new Hashtable<>();
            tipoValor.put(tipo,val);
            Hashtable<String,Hashtable<String, String>> nuevo = new Hashtable<>();
            nuevo.put(nombreParam,tipoValor);
            if(!tablaSimbolos.containsKey(nombreParam)) {
                tablaSimbolos.putAll(nuevo); // Agrego el parametro y su valor a la tabla de simbolos
            }
            else{
                respuesta = "Error Semantico, la variable "+nombreParam+" ya existe";
                cntParam=parametros.size();
                cntParamLlamado=paramLlamado.size();
                contadorPrograma=tablaAux.size(); // ESTO PODRIA SER UN ERROR
                error = true;
                // Ahora escribo el error en el archivo error.out
                File f = new File("error.out");
                try{
                    FileWriter fw = new FileWriter(f);
                    BufferedWriter bw = new BufferedWriter(fw);
                    PrintWriter pw = new PrintWriter(bw);
                    pw.write("Error Semantico, la variable "+nombreParam+" ya existe");
                    pw.close();
                    bw.close();
                    fw.close();
                } catch (IOException e) {
                    System.out.println("Error al escribir en el archivo error.out");
                }
            }
            cntParam+=2; // Quito el ID,
            cntParamLlamado+=2; // Quito el valor,
        }
        calcularResultadoBucle(operaciones);
        tablaSimbolos = new Hashtable<>();
        tablaSimbolos.putAll(tablaSimbolosAux);
    }

    public void forAEnsamblador(ArrayList<String> condicion,ArrayList<String> incrementador,String k){
        int cnt =0;
        cnt+=1; // Quito el $
        String actual = condicion.get(cnt); // ID-nombre
        String [] arr = actual.split("-"); // [ID,nombre]
        String var1 = "$"+arr[1]; // $nombre
        cnt+=1; // Quito el ID
        actual = condicion.get(cnt); // MENORQUE-<
        arr = actual.split("-"); // [MENORQUE,<]
        String op = arr[1]; // <
        cnt+=1; // Quito el operador
        actual = condicion.get(cnt);
        String var2 = "";
        if(actual.contains("$")){
            cnt+=1; // Quito el $
            actual = condicion.get(cnt); // ID-nombre
            arr = actual.split("-"); // [ID,nombre]
            var2 = "$"+arr[1]; // $nombre
            cnt+=1; // Quito el ID
        }
        else{
            actual = condicion.get(cnt); // NUMERO-9
            arr = actual.split("-"); // [NUMERO,9]
            var2 = arr[1]; // $nombre
            cnt+=1; // Quito el valor
        }
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("Interprete.asm"));
            bw.write("mov "+var1+", 0"+"\n");
            bw.write("mov cx, "+var1+"\n");
            bw.write("mov ax, "+var2+"\n");
            bw.write("ciclo: "+"\n");
            bw.write("cmp cx, ax"+"\n");
            if(op.equals("<")){
                bw.write("jge next"+"\n");
            }
            else if(op.equals(">")){
                bw.write("jbe next"+"\n");
            }
            else if(op.equals("<=")){
                bw.write("jg next"+"\n");
            }
            else if(op.equals("=>")){
                bw.write("jb next"+"\n");
            }
            else if(op.equals("==")){
                bw.write("jne next"+"\n");
            }
            else{ // op.equals("!=")
                bw.write("je next"+"\n");
            }
            bw.write("; instrucciones for"+"\n");
            if(incrementador.contains("MENOSMENOS")){
                bw.write("dec cx"+"\n");
            }
            else{
                bw.write("inc cx"+"\n");
            }
            bw.write("jmp ciclo"+"\n");
            bw.write("next:"+"\n");
            bw.write("; instrucciones luego del for"+"\n");
            bw.close();
            System.out.println("Exito al escribir en Interprete.asm");
        } catch (IOException e) {
            System.out.println("Error al escribir en Interprete.asm");
        }
    }

    public void aEnsamblador(String instruccion, ArrayList<String> condicion){
        int cnt = 0; // contador para moverse dentro de la condicion

        if(instruccion.equals("IF-ELSE")){
            cnt+=1; // Quito el $
            String actual = condicion.get(cnt); // ID-nombre
            String [] arr = actual.split("-"); // [ID,nombre]
            String var1 = "$"+arr[1]; // $nombre
            cnt+=1; // Quito el ID
            actual = condicion.get(cnt); // MENORQUE-<
            arr = actual.split("-"); // [MENORQUE,<]
            String op = arr[1]; // <
            cnt+=1; // Quito el operador
            actual = condicion.get(cnt);
            String var2 = "";
            if(actual.contains("$")){
                cnt+=1; // Quito el $
                actual = condicion.get(cnt); // ID-nombre
                arr = actual.split("-"); // [ID,nombre]
                var2 = "$"+arr[1]; // $nombre
                cnt+=1; // Quito el ID
            }
            else{
                actual = condicion.get(cnt); // NUMERO-9
                arr = actual.split("-"); // [NUMERO,9]
                var2 = arr[1]; // $nombre
                cnt+=1; // Quito el valor
            }
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter("Interprete.asm"));
                bw.write("mov ax, "+var1+"\n");
                bw.write("mov bx, "+var2+"\n");
                bw.write("cmp ax, bx"+"\n");
                if(op.equals("<")){
                    bw.write("jge else"+"\n");
                }
                else if(op.equals(">")){
                    bw.write("jbe else"+"\n");
                }
                else if(op.equals("<=")){
                    bw.write("jg else"+"\n");
                }
                else if(op.equals("=>")){
                    bw.write("jb else"+"\n");
                }
                else if(op.equals("==")){
                    bw.write("jne else"+"\n");
                }
                else{ // op.equals("!=")
                    bw.write("je else"+"\n");
                }
                bw.write("; instrucciones if"+"\n");
                bw.write("jmp next"+"\n");
                bw.write("else:"+"\n");
                bw.write("; instrucciones else"+"\n");
                bw.write("next:"+"\n");
                bw.write("; instrucciones luego del else"+"\n");
                bw.close();
                System.out.println("Exito al escribir en Interprete.asm");
            } catch (IOException e) {
                System.out.println("Error al escribir en Interprete.asm");
            }
        }
        else if(instruccion.equals("WHILE")){
            cnt+=1; // Quito el $
            String actual = condicion.get(cnt); // ID-nombre
            String [] arr = actual.split("-"); // [ID,nombre]
            String var1 = "$"+arr[1]; // $nombre
            cnt+=1; // Quito el ID
            actual = condicion.get(cnt); // MENORQUE-<
            arr = actual.split("-"); // [MENORQUE,<]
            String op = arr[1]; // <
            cnt+=1; // Quito el operador
            actual = condicion.get(cnt);
            String var2 = "";
            if(actual.contains("$")){
                cnt+=1; // Quito el $
                actual = condicion.get(cnt); // ID-nombre
                arr = actual.split("-"); // [ID,nombre]
                var2 = "$"+arr[1]; // $nombre
                cnt+=1; // Quito el ID
            }
            else{
                actual = condicion.get(cnt); // NUMERO-9
                arr = actual.split("-"); // [NUMERO,9]
                var2 = arr[1]; // $nombre
                cnt+=1; // Quito el valor
            }
            try {
                BufferedWriter bw = new BufferedWriter(new FileWriter("Interprete.asm"));
                bw.write("mov cx, "+var1+"\n");
                bw.write("mov ax, "+var2+"\n");
                bw.write("ciclo: "+"\n");
                bw.write("cmp cx, ax"+"\n");
                if(op.equals("<")){
                    bw.write("jge next"+"\n");
                }
                else if(op.equals(">")){
                    bw.write("jbe next"+"\n");
                }
                else if(op.equals("<=")){
                    bw.write("jg next"+"\n");
                }
                else if(op.equals("=>")){
                    bw.write("jb next"+"\n");
                }
                else if(op.equals("==")){
                    bw.write("jne next"+"\n");
                }
                else{ // op.equals("!=")
                    bw.write("je next"+"\n");
                }
                bw.write("; instrucciones while"+"\n");
                bw.write("inc cx"+"\n");
                bw.write("jmp ciclo"+"\n");
                bw.write("next:"+"\n");
                bw.write("; instrucciones luego del while"+"\n");
                bw.close();
                System.out.println("Exito al escribir en Interprete.asm");
            } catch (IOException e) {
                System.out.println("Error al escribir en Interprete.asm");
            }
        }
    }

    public void calcularResultadoBucle(ArrayList<String> tablaAux){
        int contPrograma = 0;
        while (contPrograma<tablaAux.size()) {
            String actual = tablaAux.get(contPrograma); // Por ejemplo: CONDICIONIF-if
            String[] arrActual = actual.split("-"); // Por ejemplo: [CONDICIONIF,if]
            switch (arrActual[0]) {
                case "CONDICIONIF":
                    ArrayList<String> condicionIf = new ArrayList<>();
                    contPrograma += 2; // Quito el if(
                    while (!tablaAux.get(contPrograma).contains(")")) { // Guarda hasta encontrar el )
                        condicionIf.add(tablaAux.get(contPrograma)); // Agrega a la condicion
                        contPrograma++; // Aumenta el contador de tokens o programa
                    }
                    contPrograma += 2; // Quito el ){
                    boolean resultadoIf = evaluarCondicion(condicionIf);
                    /* -------- SI SE CUMPLE EL IF -------- */
                    if (resultadoIf) {
                        calcularResultado(tablaAux); // Ejecuto las instrucciones dentro del if
                        contPrograma+=1; // Quito el }
                    }
                    /* ------- SI NO SE CUMPLE EL IF ------- */
                    else {
                        // Aumento el contador del programa hasta encontrar el CONDICIONELSE o el CONDICIONELSIF
                        // Lo que equivale a ignorar lo del if que no se cumplio
                        while (!tablaAux.get(contPrograma).contains("CONDICIONELSE")&&!tablaAux.get(contPrograma).contains("CONDICIONELSIF")) {
                            contPrograma++;
                        }
                        if(tablaAux.get(contPrograma).contains("CONDICIONELSE")) {
                            contPrograma += 2; // Quito el else{
                        }
                        calcularResultado(tablaAux); // Ejecuto las instrucciones dentro del else
                    }
                    aEnsamblador("IF-ELSE",condicionIf); // PARA PASAR EL IF-ELSE A ENSAMBLADOR
                    break;

                case "CONDICIONELSIF":
                    ArrayList<String> condicionElsif = new ArrayList<>();
                    contPrograma += 2; // Quito el elsif(
                    while (!tablaAux.get(contPrograma).contains(")")) { // Guarda hasta encontrar el )
                        condicionElsif.add(tablaAux.get(contPrograma)); // Agrega a la condicion
                        contPrograma++; // Aumenta el contador de tokens o programa
                    }
                    contPrograma += 2; // Quito el ){
                    boolean resultadoElsif = evaluarCondicion(condicionElsif);
                    if (resultadoElsif) {
                        calcularResultado(tablaAux); // Ejecuto las instrucciones dentro del elsif
                        contPrograma+=1; // Quito el }
                    }
                    else {
                        // Aumento el contador del programa hasta encontrar el CONDICIONELSE
                        // Lo que equivale a ignorar lo del if que no se cumplio
                        while (!tablaAux.get(contPrograma).contains("CONDICIONELSE")&&!tablaAux.get(contPrograma).contains("CONDICIONELSIF")) {
                            contPrograma++;
                        }
                        if(tablaAux.get(contPrograma).contains("CONDICIONELSE")) {
                            contPrograma += 2; // Quito el else{
                        }
                        calcularResultado(tablaAux); // Ejecuto las instrucciones dentro del else
                    }
                    break;

                case "CONDICIONELSE":
                    contPrograma+=2; // Quito el else{
                    int cntLlaves = 1;
                    while (cntLlaves!=0){ //
                        if (tablaAux.get(contPrograma).contains("{")){
                            cntLlaves++;
                        }
                        if (tablaAux.get(contPrograma).contains("}")){
                            cntLlaves--;
                        }
                        contPrograma++;
                    }
                    break;

                case "MY":
                    contPrograma += 1; // Quito el my
                    if(tablaAux.get(contPrograma).contains("$")){ // Si es para string o int
                        contPrograma+=1; // Quito el $
                        actual = tablaAux.get(contPrograma); // Ejemplo: ID-nombre
                        arrActual = actual.split("-"); //  Ejemplo: [ID,nombre]
                        String k = "$"+arrActual[1]; // k seria el nombre de la variable. Por ejemplo: $nombre
                        contPrograma+=1; // Quito el ID
                        contPrograma+=1; // Quito el =

                        if(!tablaAux.get(contPrograma).contains("join")) {
                            String tipo = "NUMERO";
                            if (tablaAux.get(contPrograma).contains("STRINGCOMPLEJO")) {
                                tipo = "STRINGCOMPLEJO";
                            }
                            Object valor;
                            ArrayList<String> opAsignacion = new ArrayList<>();
                            while (!tablaAux.get(contPrograma).contains(";")) {  // Guardo la asignacion para ser evaluada
                                opAsignacion.add(tablaAux.get(contPrograma));
                                contPrograma++;
                            }
                            opAsignacion.add(tablaAux.get(contPrograma)); // Agrego el ; a la asignacion para ayuda
                            contPrograma += 1; // Quito el ;

                            Hashtable<String, String> tipoValor = new Hashtable<>();
                            valor = evaluarAsignacion(tipo, opAsignacion); // Nuevo valor de la variable
                            if(String.valueOf(valor).equals("Error")){ // En caso de error, borrar este if.
                                error=true;
                                contPrograma=tablaAux.size();
                                return;
                            }
                            tipoValor.put(tipo, String.valueOf(valor));

                            Hashtable<String, Hashtable<String, String>> nuevo = new Hashtable<>();
                            nuevo.put(k, tipoValor);
                            if(!tablaSimbolos.containsKey(k)) {
                                tablaSimbolos.putAll(nuevo); // Modifico en la tabla de simbolos
                            }
                            else{
                                respuesta = "Error Semantico, la variable "+k+" ya existe";
                                contPrograma=tablaAux.size();
                                contadorPrograma=1000000000; // ESTO PODRIA SER UN ERROR
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try{
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, la variable "+k+" ya existe");
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                            }

                        }
                        else{
                            ArrayList<String> asignacionJoin = new ArrayList<>();
                            while(tablaAux.get(contPrograma).contains(";")){
                                asignacionJoin.add(tablaAux.get(contPrograma));
                                contPrograma++;
                            }
                            contPrograma+=1; // Quito el ;
                            Object val = evaluarAsignacion("STRINGCOMPLEJO",asignacionJoin);
                            if(String.valueOf(val).equals("Error")){ // En caso de error, borrar este if.
                                error=true;
                                contPrograma=tablaAux.size();
                                return;
                            }
                            Hashtable<String, String> v = new Hashtable<>(); // v ser�a el tipo-valor del simbolo
                            v.put("STRINGCOMPLEJO", String.valueOf(val));
                            if(!tablaSimbolos.containsKey(k)){
                                tablaSimbolos.put(k, v); // Agrego el string a la tabla de simbolos
                            }
                            else{
                                respuesta = "Error Semantico, la variable "+k+" ya existe";
                                contPrograma=tablaAux.size();
                                contadorPrograma=1000000000; // ESTO PODRIA SER UN ERROR
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try{
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, la variable "+k+" ya existe");
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                            }
                        }
                    }
                    else if (tablaAux.get(contPrograma).contains("@")){ // Si es para un arreglo
                        contPrograma+=1; // Quito el @
                        actual = tablaAux.get(contPrograma); // Ejemplo: ID-nombre
                        arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                        String k = "@"+arrActual[1]; // k seria el nombre del arreglo. Por ejemplo: @nombre
                        contPrograma+=1; // Quito el ID
                        contPrograma+=1; // Quito la asignacion ( el = )
                        if(tablaAux.get(contPrograma).contains("split")||tablaAux.get(contPrograma).contains("[")) {
                            if (!tablaAux.get(contPrograma).contains("split")) {
                                contPrograma += 1; // Quito el [
                                String arreglo = "["; // String del arreglo para almacenar en la tabla de s�mbolos
                                while (!tablaAux.get(contPrograma).equals("CERRARBRACKETS-]")) { // Termina cuando encuentra ]
                                    actual = tablaAux.get(contPrograma); // Ejemplo: NUMERO-8 � STRINGCOMPLEJO-"hola" � COMA-,
                                    arrActual = actual.split("-"); // Ejemplo: [NUMERO,8] � [STRINGCOMPLEJO,"hola"] � "[COMA,,]
                                    arreglo += arrActual[1]; // Agrega el valor o la coma al string
                                    contPrograma++; // Se mueve al siguiente
                                }
                                arreglo += "]"; // Agrega el ]
                                contPrograma += 1; // Quito el ]
                                Hashtable<String, String> v = new Hashtable<>(); // v ser�a el tipo-valor del simbolo
                                v.put("ARREGLO", arreglo);
                                if (!tablaSimbolos.containsKey(k)) {
                                    tablaSimbolos.put(k, v); // Agrego el nuevo arreglo a la tabla de simbolos
                                } else {
                                    respuesta = "Error Semantico, el arreglo "+k+" ya existe";
                                    contPrograma = tablaAux.size();
                                    contadorPrograma = 1000000000; // ESTO PODRIA SER UN ERROR
                                    error = true;
                                    // Ahora escribo el error en el archivo error.out
                                    File f = new File("error.out");
                                    try {
                                        FileWriter fw = new FileWriter(f);
                                        BufferedWriter bw = new BufferedWriter(fw);
                                        PrintWriter pw = new PrintWriter(bw);
                                        pw.write("Error Semantico, el arreglo " + k + " ya existe");
                                        pw.close();
                                        bw.close();
                                        fw.close();
                                    } catch (IOException e) {
                                        System.out.println("Error al escribir en el archivo error.out");
                                    }
                                }
                                contPrograma += 1; // Quito el ;
                            } else {
                                ArrayList<String> asignacionSplit = new ArrayList<>();
                                while (tablaAux.get(contPrograma).contains(";")) {
                                    asignacionSplit.add(tablaAux.get(contPrograma));
                                    contPrograma++;
                                }
                                contPrograma += 1; // Quito el ;
                                Object val = evaluarAsignacion("ARREGLO", asignacionSplit);
                                if (String.valueOf(val).equals("Error")) { // En caso de error, borrar este if.
                                    error = true;
                                    contPrograma = tablaAux.size();
                                    return;
                                }
                                Hashtable<String, String> v = new Hashtable<>(); // v ser�a el tipo-valor del simbolo
                                v.put("ARREGLO", String.valueOf(val));
                                if (!tablaSimbolos.containsKey(k)) {
                                    tablaSimbolos.put(k, v); // Agrego el nuevo arreglo a la tabla de simbolos
                                } else {
                                    respuesta = "Error Semantico, el arreglo "+k+" ya existe";
                                    contPrograma = tablaAux.size();
                                    contadorPrograma = 1000000000; // ESTO PODRIA SER UN ERROR
                                    error = true;
                                    // Ahora escribo el error en el archivo error.out
                                    File f = new File("error.out");
                                    try {
                                        FileWriter fw = new FileWriter(f);
                                        BufferedWriter bw = new BufferedWriter(fw);
                                        PrintWriter pw = new PrintWriter(bw);
                                        pw.write("Error Semantico, el arreglo " + k + " ya existe");
                                        pw.close();
                                        bw.close();
                                        fw.close();
                                    } catch (IOException e) {
                                        System.out.println("Error al escribir en el archivo error.out");
                                    }
                                }
                            }
                        }
                        else {
                            respuesta = "Error Semantico, tipos de datos distintos: ARREGLO STRINGCOMPLEJO";
                            contPrograma = tablaAux.size();
                            contadorPrograma = 1000000000; // ESTO PODRIA SER UN ERROR
                            error = true;
                            // Ahora escribo el error en el archivo error.out
                            File f = new File("error.out");
                            try {
                                FileWriter fw = new FileWriter(f);
                                BufferedWriter bw = new BufferedWriter(fw);
                                PrintWriter pw = new PrintWriter(bw);
                                pw.write("Error Semantico, tipos de datos distintos: ARREGLO STRINGCOMPLEJO");
                                pw.close();
                                bw.close();
                                fw.close();
                            } catch (IOException e) {
                                System.out.println("Error al escribir en el archivo error.out");
                            }
                            return;
                        }
                    }
                    break;

                case "PUSH":
                    contPrograma+=3; // Quito el push(@
                    actual = tablaAux.get(contPrograma); // Ejemplo: ID-nombre
                    arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                    String nombre = "@"+arrActual[1]; // nombre del arreglo
                    if(tablaSimbolos.containsKey(nombre)) {
                        Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // tipo y valor del arreglo
                        Enumeration<String> keys = tipoValor.keys();
                        String tipo = keys.nextElement(); // tipo ARREGLO
                        String arreglo = tipoValor.get(tipo); // valor del arreglo. Ejemplo: ["a","b","c"]
                        contPrograma += 2; // Quito el ID,

                        if (tablaAux.get(contPrograma).contains("$")) {
                            contPrograma += 1; // Quito el $
                            actual = tablaAux.get(contPrograma); // Ejemplo: ID-nombre
                            arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                            String nombrePush = "$" + arrActual[1]; // Nombre de la variable a hacer push
                            if(tablaSimbolos.containsKey(nombrePush)) {
                                Hashtable<String, String> tipoValorPush = tablaSimbolos.get(nombrePush);
                                Enumeration<String> keysPush = tipoValorPush.keys();
                                String tipoPush = keysPush.nextElement();
                                String valorPush = tipoValorPush.get(tipoPush);
                                arreglo = arreglo.substring(0, arreglo.length() - 1);
                                arreglo += "," + valorPush + "]";
                                tipoValor.put(tipo, arreglo);
                                tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                                contPrograma += 3; // Quito el ID);
                            }
                            else{
                                respuesta+= "Error Semantico, "+nombrePush+" no existe.";
                                //i = arrPrint.size();
                                contPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try {
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, "+nombrePush+" no existe.");
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                                return;
                            }
                        } else {
                            actual = tablaAux.get(contPrograma); // Ejemplo: STRINGCOMPLEJO-"hola"
                            arrActual = actual.split("-"); // Ejemplo: [STRINGCOMPLEJO,"hola"]
                            String tipoPush = arrActual[0];
                            String valorPush = arrActual[1];
                            arreglo = arreglo.substring(0, arreglo.length() - 1);
                            arreglo += "," + valorPush + "]";
                            tipoValor.put(tipo, arreglo);
                            tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                            contPrograma += 3; // Quito el valor);
                        }
                    }
                    else{
                        respuesta+= "Error Semantico, "+nombre+" no existe.";
                        //i = arrPrint.size();
                        contPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, "+nombre+" no existe.");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return;
                    }
                    break;

                case "UNSHIFT":
                    contPrograma+=3; // Quito el unshift(@
                    actual = tablaAux.get(contPrograma);
                    arrActual = actual.split("-");
                    nombre = "@"+arrActual[1]; // nombre del arreglo
                    if(tablaSimbolos.containsKey(nombre)) {
                        Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // tipo y valor del arreglo
                        Enumeration<String> keys = tipoValor.keys();
                        String tipo = keys.nextElement(); // tipo ARREGLO
                        String arreglo = tipoValor.get(tipo); // valor del arreglo. Ejemplo: ["a","b","c"]
                        contPrograma += 2; // Quito el ID,
                        if (tablaAux.get(contPrograma).contains("$")) {
                            contPrograma += 1; // Quito el $
                            actual = tablaAux.get(contPrograma); // Ejemplo: ID-nombre
                            arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                            String nombrePush = "$" + arrActual[1]; // Nombre de la variable a hacer push
                            if(tablaSimbolos.containsKey(nombrePush)) {
                                Hashtable<String, String> tipoValorPush = tablaSimbolos.get(nombrePush);
                                Enumeration<String> keysPush = tipoValorPush.keys();
                                String tipoPush = keysPush.nextElement();
                                String valorPush = tipoValorPush.get(tipoPush);
                                boolean vacio = false; // Para saber si el arreglo esta vacio o no
                                if (arreglo.equals("[]")) {
                                    vacio = true;
                                }
                                arreglo = arreglo.substring(1); // Ejemplo: "a","b"] � ]
                                String arregloParcial = "[" + valorPush; // Ejemplo: ["x"
                                if (!vacio) { // Agrego , en caso de que el arreglo no estuviera vac�o
                                    arregloParcial += ","; // Ejemplo: ["x",
                                }
                                arreglo = arregloParcial + arreglo; // Ejemplo: ["x","a","b"] � ["x"]
                                tipoValor.put(tipo, arreglo);
                                tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                                contPrograma += 3; // Quito el ID);
                            }
                            else{
                                respuesta+= "Error Semantico, "+nombre+" no existe.";
                                //i = arrPrint.size();
                                contPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try {
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, "+nombre+" no existe.");
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                                return;
                            }
                        } else {
                            actual = tablaAux.get(contPrograma); // Ejemplo: STRINGCOMPLEJO-"hola"
                            arrActual = actual.split("-"); // Ejemplo: [STRINGCOMPLEJO,"hola"]
                            String tipoPush = arrActual[0];
                            String valorPush = arrActual[1];
                            boolean vacio = false; // Para saber si el arreglo esta vacio o no
                            if (arreglo.equals("[]")) {
                                vacio = true;
                            }
                            arreglo = arreglo.substring(1); // Ejemplo: "a","b"] � ]
                            String arregloParcial = "[" + valorPush; // Ejemplo: ["x"
                            if (!vacio) { // Agrego , en caso de que el arreglo no estuviera vac�o
                                arregloParcial += ","; // Ejemplo: ["x",
                            }
                            arreglo = arregloParcial + arreglo; // Ejemplo: ["x","a","b"] � ["x"]
                            tipoValor.put(tipo, arreglo);
                            tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                            contPrograma += 3; // Quito el valor);
                        }
                    }
                    else{
                        respuesta+= "Error Semantico, "+nombre+" no existe.";
                        //i = arrPrint.size();
                        contPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, "+nombre+" no existe.");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return;
                    }
                    break;

                case "BUCLEWHILE":
                    ArrayList<String> condicionWhile = new ArrayList<>(); // Arreglo que guardara la condicion del while
                    ArrayList<String> opWhile = new ArrayList<>(); // Arreglo que guardar� las instrucciones que estan
                    // dentro del while
                    contPrograma += 2; // Quito el while(
                    while (!tablaAux.get(contPrograma).contains(")")) { // Guarda hasta encontrar el )
                        condicionWhile.add(tablaAux.get(contPrograma)); // Agrega a la condicion
                        contPrograma++; // Aumenta el contador de tokens o programa
                    }
                    contPrograma += 2; // Quito el ){
                    while (!tablaAux.get(contPrograma).contains("}")) { // Guarda hasta encontrar el }
                        opWhile.add(tablaAux.get(contPrograma)); // Agrega a las operaciones del while
                        contPrograma++;
                    }
                    contPrograma+=1; // Quito el }
                    evaluarBucle(condicionWhile, opWhile); // Eval�o el while
                    aEnsamblador("WHILE",condicionWhile); // PARA PASAR EL IF-ELSE A ENSAMBLADOR
                    break;

                case "BUCLEFOR":
                    ArrayList<String> condicionFor = new ArrayList<>(); // Arreglo que guardara la condicion del while
                    ArrayList<String> opFor = new ArrayList<>(); // Arreglo que guardar� las instrucciones que estan
                    // dentro del for
                    contPrograma+=2; // Quito el for(
                    contPrograma+=1; // Quito el my
                    contPrograma+=1; // Quito el $
                    actual = tablaAux.get(contPrograma); // Ejemplo: ID-nombre
                    arrActual = actual.split("-"); //  Ejemplo: [ID,nombre]
                    String k = "$"+arrActual[1]; // k seria el nombre de la variable. Por ejemplo: $nombre
                    contPrograma+=1; // Quito el ID
                    contPrograma+=1; // Quito la asignacion ( el = )
                    actual = tablaAux.get(contPrograma); // Ejemplo: NUMERO-8 � STRINGCOMPLEJO-"hola"
                    arrActual = actual.split("-"); // Ejemplo: [NUMERO,8] � [STRINGCOMPLEJO,"hola"]
                    Hashtable<String,String> v = new Hashtable<>(); // v ser�a las otras dos partes necesarias para el simbolo
                    v.put(arrActual[0],arrActual[1]); // Las cuales son tipo y valor
                    if(!tablaSimbolos.containsKey(k)){
                        tablaSimbolos.put(k,v); // Agrego la nueva variable a la tabla de simbolos
                    }
                    else{
                        respuesta = "Error Semantico, la variable "+k+" ya existe";
                        contPrograma=tablaAux.size();
                        contadorPrograma=1000000000; // ESTO PODRIA SER UN ERROR
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try{
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, la variable "+k+" ya existe");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return;
                    }
                    contPrograma+=2; // Quito el valor; ( por ejemplo 8; )

                    while (!tablaAux.get(contPrograma).contains(";")){ // Guarda hasta encontrar el ;
                        condicionFor.add(tablaAux.get(contPrograma)); // Agrega a la condicion
                        contPrograma++; // Aumenta el contador de tokens o programa
                    }
                    contPrograma+=1; // Quito el ;
                    ArrayList<String> incrementador = new ArrayList<>(); // Arreglo para guardar la instruccion de incrementar
                    while (!tablaAux.get(contPrograma).contains(")")){ // Guarda hasta encontrar el )
                        incrementador.add(tablaAux.get(contPrograma)); // Agrega al incrementador
                        contPrograma++; // Aumenta el contador de tokens o programa
                    }
                    contPrograma+=2; // Quito el ){
                    cntLlaves = 1; // Contadores para evitar las llaves que no son del for
                    while (cntLlaves!=0){ // Guarda hasta encontrar el }
                        if (tablaAux.get(contPrograma).contains("{")){
                            cntLlaves++;
                        }
                        if (tablaAux.get(contPrograma).contains("}")){
                            cntLlaves--;
                        }
                        opFor.add(tablaAux.get(contPrograma)); // Agrega a las operaciones del for
                        contPrograma++;
                    }
                    contPrograma+=1; // Quito el }
                    for(int i=0;i<incrementador.size();i++){ // Agrego el incrementador como una operacion mas
                        opFor.add(incrementador.get(i)); // Haciendo el for como un while
                    }
                    evaluarBucle(condicionFor, opFor); // Eval�o el for
                    forAEnsamblador(condicionFor,incrementador,k); // PARA PASAR EL FOR A ENSAMBLADOR
                    break;

                case "CONDICIONSWITCH":
                    contPrograma+=3; // Quito el switch($
                    actual = tablaAux.get(contPrograma); // Ejemplo: ID-nombre
                    arrActual = actual.split("-"); //  Ejemplo: [ID,nombre]
                    k = "$"+arrActual[1]; // k seria el nombre de la variable. Por ejemplo: $nombre
                    contPrograma+=2; // Quito el ID)
                    if(tablaSimbolos.containsKey(k)) {
                        Hashtable<String, String> tipoValor = tablaSimbolos.get(k); // Saco el tipo y valor de la variable
                        Enumeration<String> keys = tipoValor.keys();               // que esta almacenado en la tabla de simbolos
                        contPrograma += 1; // Quito el {
                        ArrayList<String> opSwitch = new ArrayList<>(); // Aca se guardaran los casos del switch
                        cntLlaves = 1;
                        while (cntLlaves != 0) { // Guarda hasta encontrar el }
                            if (tablaAux.get(contPrograma).contains("{")) {
                                cntLlaves++;
                            }
                            if (tablaAux.get(contPrograma).contains("}")) {
                                cntLlaves--;
                            }
                            opSwitch.add(tablaAux.get(contPrograma)); // Agrega a los casos del switch
                            contPrograma++;
                        }

                        evaluarSwitch(tipoValor, opSwitch);
                    }
                    else{
                        respuesta+= "Error Semantico, "+k+" no existe.";
                        //i = arrPrint.size();
                        contPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, "+k+" no existe.");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return;
                    }

                    break;

                case "PRINT":
                    contPrograma += 2; // Quito el print(
                    ArrayList<String> arrPrint = new ArrayList<>();
                    while (!tablaAux.get(contPrograma).contains(";")) {
                        arrPrint.add(tablaAux.get(contPrograma)); // Agrega lo que se a imprimir al print
                        contPrograma++;
                    }
                    arrPrint.remove(arrPrint.size()-1); // Quito el ) del arreglo del print
                    evaluarPrint(arrPrint);
                    contPrograma+=1; // Quito el ;
                    break;

                case "DOLAR":
                    contPrograma += 1; // Quito el $
                    actual = tablaAux.get(contPrograma); // Ejemplo: ID-contador
                    arrActual = actual.split("-"); // Ejemplo: [ID,contador]
                    k = "$" + arrActual[1]; // k ser�a el nombre de la variable. Por ejemplo: $contador
                    if(tablaSimbolos.containsKey(k)) {
                        contPrograma += 1; // Quito el ID
                        if (tablaAux.get(contPrograma).contains("MASMAS")) { // Si encuentro un ++
                            Hashtable<String, String> tipoValor = tablaSimbolos.get(k);
                            Enumeration<String> keys = tipoValor.keys();
                            String tipo = keys.nextElement();
                            int valor = Integer.parseInt(tipoValor.get(tipo)); // valor es el valor de la variable almacenado
                            valor++; // Aumento ese valor por ser un ++
                            tipoValor.put(tipo, String.valueOf(valor)); // Agrego nuevamente el valor a tipoValor
                            Hashtable<String, Hashtable<String, String>> nuevo = new Hashtable<>();
                            nuevo.put(k, tipoValor);
                            tablaSimbolos.putAll(nuevo); // Modifico el elemento en la tabla de simbolos
                        } else if (tablaAux.get(contPrograma).contains("MENOSMENOS")) { // Si encuentro un --
                            Hashtable<String,String> tipoValor = tablaSimbolos.get(k);
                            Enumeration<String> keys = tipoValor.keys();
                            String tipo = keys.nextElement();
                            int valor = Integer.parseInt(tipoValor.get(tipo));  // valor almacenado
                            valor--; // Decremento el valor por ser --
                            tipoValor.put(tipo, String.valueOf(valor)); // Agrego el valor nuevo a tipoValor
                            Hashtable<String, Hashtable<String, String>> nuevo = new Hashtable<>();
                            nuevo.put(k, tipoValor);
                            tablaSimbolos.putAll(nuevo); // Modifico en la tabla de simbolos
                        } else { // Cuando encuentro una asignacion
                            contPrograma += 1; // Quito el =
                            Hashtable<String,String> tipoValor = tablaSimbolos.get(k);
                            Enumeration<String>keys = tipoValor.keys();
                            String tipo = keys.nextElement();
                            Object valor;
                            ArrayList<String> opAsignacion = new ArrayList<>();
                            while (!tablaAux.get(contPrograma).contains(";")) {  // Guardo la asignacion para ser evaluada
                                opAsignacion.add(tablaAux.get(contPrograma));
                                contPrograma++;
                            }
                            opAsignacion.add(tablaAux.get(contPrograma)); // Agrego el ; a la asignacion para ayuda
                            contPrograma += 1; // Quito el ;

                            valor = evaluarAsignacion(tipo, opAsignacion); // Nuevo valor de la variable
                            if(String.valueOf(valor).equals("Error")){ // En caso de error, borrar este if.
                                error = true;
                                contPrograma=tablaAux.size();
                                return;
                            }
                            tipoValor.put(tipo, String.valueOf(valor));

                            Hashtable<String, Hashtable<String, String>> nuevo = new Hashtable<>();
                            nuevo.put(k, tipoValor);
                            tablaSimbolos.putAll(nuevo); // Modifico en la tabla de simbolos
                        }
                    }
                    else{
                        respuesta+= "Error Semantico, "+k+" no existe.";
                        //i = arrPrint.size();
                        contPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, "+k+" no existe.");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return;
                    }
                    break;

                case "FUN":
                    contPrograma+=1; // Quito el fun
                    actual = tablaAux.get(contPrograma); // Ejemplo: ID-nombre
                    arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                    String nombreFun = arrActual[1]; // Nombre de la funcion
                    if(funciones.containsKey(nombreFun)) {
                        Hashtable<ArrayList<String>, ArrayList<String>> paramOp = funciones.get(nombreFun);
                        Enumeration<ArrayList<String>> funKeys = paramOp.keys();
                        ArrayList<String> parametros = funKeys.nextElement();
                        ArrayList<String> operaciones = paramOp.get(parametros);
                        ArrayList<String> paramLlamado = new ArrayList<>();
                        contPrograma += 2; // Quito el ID(
                        while (!tablaAux.get(contPrograma).contains(")")) {
                            paramLlamado.add(tablaAux.get(contPrograma));
                            contPrograma++;
                        }
                        contPrograma += 2; // Quito el );
                        iniciarParametros(parametros, paramLlamado, operaciones);
                    }
                    else{
                        respuesta+= "Error Semantico, la funcion "+nombreFun+" no existe.";
                        //i = arrPrint.size();
                        contPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, la funcion "+nombreFun+" no existe.");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return;
                    }
                    break;

                case "BUCLEFOREACH":
                    contPrograma+=2; // Quito el foreach(
                    ArrayList<String> condicionForeach = new ArrayList<>();
                    ArrayList<String> opForeach = new ArrayList<>();
                    while (!tablaAux.get(contPrograma).contains("{")){
                        condicionForeach.add(tablaAux.get(contPrograma));
                        contPrograma++;
                    }
                    condicionForeach.remove(condicionForeach.size()-1); // Quito el )
                    contPrograma+=1; // Quito el {
                    cntLlaves = 1;
                    while (cntLlaves!=0){ // Guarda hasta encontrar el }
                        if (tablaAux.get(contPrograma).contains("{")){
                            cntLlaves++;
                        }
                        if (tablaAux.get(contPrograma).contains("}")){
                            cntLlaves--;
                        }
                        opForeach.add(tablaAux.get(contPrograma)); // Agrega a los casos del switch
                        contPrograma++;
                    }
                    evaluarForeach(condicionForeach,opForeach);
                    break;

                case "BUCLEDO":
                    ArrayList<String> condicionDowhile = new ArrayList<>(); // Arreglo que guardara la condicion del DoWhile
                    ArrayList<String> opDowhile = new ArrayList<>(); // Arreglo que guardara las instrucciones que estan
                    // dentro del DoWhile
                    contPrograma+=2; // Quito el do{
                    cntLlaves = 1;
                    while (cntLlaves!=0){ // Guarda hasta encontrar el }
                        if (tablaAux.get(contPrograma).contains("{")){
                            cntLlaves++;
                        }
                        if (tablaAux.get(contPrograma).contains("}")){
                            cntLlaves--;
                        }
                        opDowhile.add(tablaAux.get(contPrograma)); // Agrega a las instrucciones del DoWhile
                        contPrograma++;
                    }
                    contPrograma+=2; // Quito el while(
                    while(!tablaAux.get(contPrograma).contains(";")){
                        condicionDowhile.add(tablaAux.get(contPrograma));
                        contPrograma++;
                    }
                    condicionDowhile.remove(condicionDowhile.size()-1); // Quito el )
                    contPrograma+=1; // Quito el ;
                    calcularResultadoBucle(opDowhile); // Ejecuto la primera vez
                    evaluarBucle(condicionDowhile, opDowhile); // Eval�o el DoWhile
                    break;

                default:
                    contPrograma++;
                    //calcularResultado(tablaAux);
                    break;
            }
        }
        //}
    }

    public void calcularResultado(ArrayList<String> tablaAux){
        String actual = tablaAux.get(contadorPrograma); // Por ejemplo: CONDICIONIF-if
        String [] arrActual = actual.split("-"); // Por ejemplo: [CONDICIONIF,if]
        switch (arrActual[0]){
            case "CONDICIONIF":
                ArrayList<String> condicionIf = new ArrayList<>();
                contadorPrograma += 2; // Quito el if(
                while (!tablaAux.get(contadorPrograma).contains(")")) { // Guarda hasta encontrar el )
                    condicionIf.add(tablaAux.get(contadorPrograma)); // Agrega a la condicion
                    contadorPrograma++; // Aumenta el contador de tokens o programa
                }
                contadorPrograma += 2; // Quito el ){
                boolean resultadoIf = evaluarCondicion(condicionIf);
                    /* -------- SI SE CUMPLE EL IF -------- */
                if (resultadoIf) {
                    calcularResultado(tablaAux); // Ejecuto las instrucciones dentro del if
                }
                    /* ------- SI NO SE CUMPLE EL IF ------- */
                else {
                    // Aumento el contador del programa hasta encontrar el CONDICIONELSE o el CONDICIONELSIF
                    // Lo que equivale a ignorar lo del if que no se cumplio
                    while (!tablaAux.get(contadorPrograma).contains("CONDICIONELSE")&&!tablaAux.get(contadorPrograma).contains("CONDICIONELSIF")) {
                        contadorPrograma++;
                    }
                    if(tablaAux.get(contadorPrograma).contains("CONDICIONELSE")) {
                        contadorPrograma += 2; // Quito el else{
                    }
                    calcularResultado(tablaAux); // Ejecuto las instrucciones dentro del else
                }
                aEnsamblador("IF-ELSE",condicionIf); // PARA PASAR EL IF-ELSE A ENSAMBLADOR
                break;

            case "CONDICIONELSIF":
                ArrayList<String> condicionElsif = new ArrayList<>();
                contadorPrograma += 2; // Quito el elsif(
                while (!tablaAux.get(contadorPrograma).contains(")")) { // Guarda hasta encontrar el )
                    condicionElsif.add(tablaAux.get(contadorPrograma)); // Agrega a la condicion
                    contadorPrograma++; // Aumenta el contador de tokens o programa
                }
                contadorPrograma += 2; // Quito el ){
                boolean resultadoElsif = evaluarCondicion(condicionElsif);
                if (resultadoElsif) {
                    calcularResultado(tablaAux); // Ejecuto las instrucciones dentro del elsif
                }
                else {
                    // Aumento el contador del programa hasta encontrar el CONDICIONELSE
                    // Lo que equivale a ignorar lo del if que no se cumplio
                    while (!tablaAux.get(contadorPrograma).contains("CONDICIONELSE")&&!tablaAux.get(contadorPrograma).contains("CONDICIONELSIF")) {
                        contadorPrograma++;
                    }
                    if(tablaAux.get(contadorPrograma).contains("CONDICIONELSE")) {
                        contadorPrograma += 2; // Quito el else{
                    }
                    calcularResultado(tablaAux); // Ejecuto las instrucciones dentro del else
                }
                break;

            case "CONDICIONELSE":
                contadorPrograma+=2; // Quito el else{
                int cntLlaves = 1;
                while (cntLlaves!=0){ //
                    if (tablaAux.get(contadorPrograma).contains("{")){
                        cntLlaves++;
                    }
                    if (tablaAux.get(contadorPrograma).contains("}")){
                        cntLlaves--;
                    }
                    contadorPrograma++;
                }
                break;

            case "MY":
                contadorPrograma+=1; // Quito el my
                if(tablaAux.get(contadorPrograma).contains("$")){ // Si es para string o int
                    contadorPrograma+=1; // Quito el $
                    actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                    arrActual = actual.split("-"); //  Ejemplo: [ID,nombre]
                    String k = "$"+arrActual[1]; // k seria el nombre de la variable. Por ejemplo: $nombre
                    contadorPrograma+=1; // Quito el ID
                    contadorPrograma+=1; // Quito el =

                    if(!tablaAux.get(contadorPrograma).contains("join")) {
                        String tipo = "NUMERO";
                        if (tablaAux.get(contadorPrograma).contains("STRINGCOMPLEJO")) {
                            tipo = "STRINGCOMPLEJO";
                        }
                        Object valor;
                        ArrayList<String> opAsignacion = new ArrayList<>();
                        while (!tablaAux.get(contadorPrograma).contains(";")) {  // Guardo la asignacion para ser evaluada
                            opAsignacion.add(tablaAux.get(contadorPrograma));
                            contadorPrograma++;
                        }
                        opAsignacion.add(tablaAux.get(contadorPrograma)); // Agrego el ; a la asignacion para ayuda
                        contadorPrograma += 1; // Quito el ;

                        Hashtable<String, String> tipoValor = new Hashtable<>();
                        valor = evaluarAsignacion(tipo, opAsignacion); // Nuevo valor de la variable
                        if(String.valueOf(valor).equals("Error")){ // En caso de error, borrar este if.
                            error=true;
                            contadorPrograma=tablaAux.size();
                            return;
                        }
                        tipoValor.put(tipo, String.valueOf(valor));

                        Hashtable<String, Hashtable<String, String>> nuevo = new Hashtable<>();
                        nuevo.put(k, tipoValor);
                        if(!tablaSimbolos.containsKey(k)) {
                            tablaSimbolos.putAll(nuevo); // Modifico en la tabla de simbolos
                        }
                        else{
                            respuesta = "Error Semantico, la variable "+k+" ya existe";
                            contadorPrograma=tablaAux.size();
                            error = true;
                            // Ahora escribo el error en el archivo error.out
                            File f = new File("error.out");
                            try{
                                FileWriter fw = new FileWriter(f);
                                BufferedWriter bw = new BufferedWriter(fw);
                                PrintWriter pw = new PrintWriter(bw);
                                pw.write("Error Semantico, la variable "+k+" ya existe");
                                pw.close();
                                bw.close();
                                fw.close();
                            } catch (IOException e) {
                                System.out.println("Error al escribir en el archivo error.out");
                            }
                        }
                    }
                    else{
                        ArrayList<String> asignacionJoin = new ArrayList<>();
                        while(tablaAux.get(contadorPrograma).contains(";")){
                            asignacionJoin.add(tablaAux.get(contadorPrograma));
                            contadorPrograma++;
                        }
                        contadorPrograma+=1; // Quito el ;
                        Object val = evaluarAsignacion("STRINGCOMPLEJO",asignacionJoin);
                        if(String.valueOf(val).equals("Error")){ // En caso de error, borrar este if.
                            error=true;
                            contadorPrograma=tablaAux.size();
                            return;
                        }
                        Hashtable<String, String> v = new Hashtable<>(); // v ser�a el tipo-valor del simbolo
                        v.put("STRINGCOMPLEJO", String.valueOf(val));
                        if(!tablaSimbolos.containsKey(k)){
                            tablaSimbolos.put(k, v); // Agrego el string a la tabla de simbolos
                        }
                        else{
                            respuesta = "Error Semantico, la variable "+k+" ya existe";
                            contadorPrograma=tablaAux.size();
                            error = true;
                            // Ahora escribo el error en el archivo error.out
                            File f = new File("error.out");
                            try{
                                FileWriter fw = new FileWriter(f);
                                BufferedWriter bw = new BufferedWriter(fw);
                                PrintWriter pw = new PrintWriter(bw);
                                pw.write("Error Semantico, la variable "+k+" ya existe");
                                pw.close();
                                bw.close();
                                fw.close();
                            } catch (IOException e) {
                                System.out.println("Error al escribir en el archivo error.out");
                            }
                        }
                    }
                }
                else if (tablaAux.get(contadorPrograma).contains("@")){ // Si es para un arreglo
                    contadorPrograma+=1; // Quito el @
                    actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                    arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                    String k = "@"+arrActual[1]; // k seria el nombre del arreglo. Por ejemplo: @nombre
                    contadorPrograma+=1; // Quito el ID
                    contadorPrograma+=1; // Quito la asignacion ( el = )
                    if(tablaAux.get(contadorPrograma).contains("split")||tablaAux.get(contadorPrograma).contains("[")) {
                        if (!tablaAux.get(contadorPrograma).contains("split")) {
                            contadorPrograma += 1; // Quito el [
                            String arreglo = "["; // String del arreglo para almacenar en la tabla de s�mbolos
                            while (!tablaAux.get(contadorPrograma).equals("CERRARBRACKETS-]")) { // Termina cuando encuentra ]
                                actual = tablaAux.get(contadorPrograma); // Ejemplo: NUMERO-8 � STRINGCOMPLEJO-"hola" � COMA-,
                                arrActual = actual.split("-"); // Ejemplo: [NUMERO,8] � [STRINGCOMPLEJO,"hola"] � "[COMA,,]
                                arreglo += arrActual[1]; // Agrega el valor o la coma al string
                                contadorPrograma++; // Se mueve al siguiente
                            }
                            arreglo += "]"; // Agrega el ]
                            contadorPrograma += 1; // Quito el ]
                            Hashtable<String, String> v = new Hashtable<>(); // v ser�a el tipo-valor del simbolo
                            v.put("ARREGLO", arreglo);
                            if (!tablaSimbolos.containsKey(k)) {
                                tablaSimbolos.put(k, v); // Agrego el nuevo arreglo a la tabla de simbolos
                            } else {
                                respuesta = "Error Semantico, la variable "+k+" ya existe";
                                contadorPrograma = tablaAux.size();
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try {
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, el arreglo " + k + " ya existe");
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                            }
                            contadorPrograma += 1; // Quito el ;
                        } else {
                            ArrayList<String> asignacionSplit = new ArrayList<>();
                            while (tablaAux.get(contadorPrograma).contains(";")) {
                                asignacionSplit.add(tablaAux.get(contadorPrograma));
                                contadorPrograma++;
                            }
                            contadorPrograma += 1; // Quito el ;
                            Object val = evaluarAsignacion("ARREGLO", asignacionSplit);
                            if (String.valueOf(val).equals("Error")) { // En caso de error, borrar este if.
                                error = true;
                                contadorPrograma = tablaAux.size();
                                return;
                            }
                            Hashtable<String, String> v = new Hashtable<>(); // v ser�a el tipo-valor del simbolo
                            v.put("ARREGLO", String.valueOf(val));
                            if (!tablaSimbolos.containsKey(k)) {
                                tablaSimbolos.put(k, v); // Agrego el nuevo arreglo a la tabla de simbolos
                            } else {
                                respuesta = "Error Semantico, el arreglo "+k+" ya existe";
                                contadorPrograma = tablaAux.size();
                                error = true;
                                // Ahora escribo el error en el archivo error.out
                                File f = new File("error.out");
                                try {
                                    FileWriter fw = new FileWriter(f);
                                    BufferedWriter bw = new BufferedWriter(fw);
                                    PrintWriter pw = new PrintWriter(bw);
                                    pw.write("Error Semantico, el arreglo " + k + " ya existe");
                                    pw.close();
                                    bw.close();
                                    fw.close();
                                } catch (IOException e) {
                                    System.out.println("Error al escribir en el archivo error.out");
                                }
                            }
                        }
                    }
                    else {
                        respuesta = "Error Semantico, tipos de datos distintos: ARREGLO STRINGCOMPLEJO";
                        //contPrograma = tablaAux.size();
                        contadorPrograma = 1000000000; // ESTO PODRIA SER UN ERROR
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, tipos de datos distintos: ARREGLO STRINGCOMPLEJO");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return;
                    }
                }
                else{ // Para funciones
                    contadorPrograma+=1; // Quito el fun
                    actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                    arrActual = actual.split("-"); // Ejemplo [ID,nombre]
                    String nombre = arrActual[1]; // Nombre de la funcion
                    contadorPrograma+=1; // Quito el ID
                    contadorPrograma+=1; // Quito el (
                    ArrayList<String> parametros = new ArrayList<>(); // Para guardar los parametros de la funcion
                    ArrayList<String> operaciones = new ArrayList<>(); // Para guardar las operaciones de la funcion
                    Hashtable<ArrayList<String>,ArrayList<String>> paramOp = new Hashtable<>(); //
                    while(!tablaAux.get(contadorPrograma).contains(")")){ // Guarda en parametros hasta el )
                        parametros.add(tablaAux.get(contadorPrograma));
                        contadorPrograma++;
                    }
                    contadorPrograma+=2; // Quito el ){
                    cntLlaves = 1;
                    while (cntLlaves!=0){ //
                        if (tablaAux.get(contadorPrograma).contains("{")){
                            cntLlaves++;
                        }
                        if (tablaAux.get(contadorPrograma).contains("}")){
                            cntLlaves--;
                        }
                        operaciones.add(tablaAux.get(contadorPrograma)); // Agrega a las operaciones del la funcion
                        contadorPrograma++;
                    }
                    paramOp.put(parametros,operaciones);
                    Hashtable<String,Hashtable<ArrayList<String>,ArrayList<String>>> funcion = new Hashtable<>();
                    //----------------------- FALTA VERIFICAR QUE NO EXISTA LA FUNCION YA ------------------------------
                    funcion.put(nombre,paramOp); // Agrego a la lista de funciones
                    funciones.putAll(funcion);
                    Hashtable<String,String> tipoValorFuncion = new Hashtable<>();
                    tipoValorFuncion.put("FUNCION","");
                    tablaSimbolos.put(nombre,tipoValorFuncion); // Agrego la funcion a la tabla de simbolos
                }
                break;

            case "PUSH":
                contadorPrograma+=3; // Quito el push(@
                actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                String nombre = "@"+arrActual[1]; // nombre del arreglo
                if(tablaSimbolos.containsKey(nombre)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // tipo y valor del arreglo
                    Enumeration<String> keys = tipoValor.keys();
                    String tipo = keys.nextElement(); // tipo ARREGLO
                    String arreglo = tipoValor.get(tipo); // valor del arreglo. Ejemplo: ["a","b","c"]
                    contadorPrograma += 2; // Quito el ID,
                    if (tablaAux.get(contadorPrograma).contains("$")) {
                        contadorPrograma += 1; // Quito el $
                        actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                        arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                        String nombrePush = "$" + arrActual[1]; // Nombre de la variable a hacer push
                        if (tablaSimbolos.containsKey(nombre)) {
                            Hashtable<String, String> tipoValorPush = tablaSimbolos.get(nombrePush);
                            Enumeration<String> keysPush = tipoValorPush.keys();
                            String tipoPush = keysPush.nextElement();
                            String valorPush = tipoValorPush.get(tipoPush);
                            arreglo = arreglo.substring(0, arreglo.length() - 1);
                            arreglo += "," + valorPush + "]";
                            tipoValor.put(tipo, arreglo);
                            tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                            contadorPrograma += 3; // Quito el ID);
                        } else {
                            actual = tablaAux.get(contadorPrograma); // Ejemplo: STRINGCOMPLEJO-"hola"
                            arrActual = actual.split("-"); // Ejemplo: [STRINGCOMPLEJO,"hola"]
                            String tipoPush = arrActual[0];
                            String valorPush = arrActual[1];
                            arreglo = arreglo.substring(0, arreglo.length() - 1);
                            arreglo += "," + valorPush + "]";
                            tipoValor.put(tipo, arreglo);
                            tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                            contadorPrograma += 3; // Quito el valor);
                        }
                    }
                    else{
                        respuesta+= "Error Semantico, "+nombre+" no existe.";
                        //i = arrPrint.size();
                        contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                        error = true;
                        // Ahora escribo el error en el archivo error.out
                        File f = new File("error.out");
                        try {
                            FileWriter fw = new FileWriter(f);
                            BufferedWriter bw = new BufferedWriter(fw);
                            PrintWriter pw = new PrintWriter(bw);
                            pw.write("Error Semantico, "+nombre+" no existe.");
                            pw.close();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            System.out.println("Error al escribir en el archivo error.out");
                        }
                        return;
                    }
                }
                else{
                    respuesta+= "Error Semantico, "+nombre+" no existe.";
                    //i = arrPrint.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombre+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return;
                }
                break;

            case "UNSHIFT":
                contadorPrograma+=3; // Quito el unshift(@
                actual = tablaAux.get(contadorPrograma);
                arrActual = actual.split("-");
                nombre = "@"+arrActual[1]; // nombre del arreglo
                if(tablaSimbolos.containsKey(nombre)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(nombre); // tipo y valor del arreglo
                    Enumeration<String> keys = tipoValor.keys();
                    String tipo = keys.nextElement(); // tipo ARREGLO
                    String arreglo = tipoValor.get(tipo); // valor del arreglo. Ejemplo: ["a","b","c"]
                    contadorPrograma += 2; // Quito el ID,
                    if (tablaAux.get(contadorPrograma).contains("$")) {
                        contadorPrograma += 1; // Quito el $
                        actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                        arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                        String nombrePush = "$" + arrActual[1]; // Nombre de la variable a hacer push
                        if(tablaSimbolos.containsKey(nombrePush)) {
                            Hashtable<String, String> tipoValorPush = tablaSimbolos.get(nombrePush);
                            Enumeration<String> keysPush = tipoValorPush.keys();
                            String tipoPush = keysPush.nextElement();
                            String valorPush = tipoValorPush.get(tipoPush);
                            boolean vacio = false; // Para saber si el arreglo esta vacio o no
                            if (arreglo.equals("[]")) {
                                vacio = true;
                            }
                            arreglo = arreglo.substring(1); // Ejemplo: "a","b"] � ]
                            String arregloParcial = "[" + valorPush; // Ejemplo: ["x"
                            if (!vacio) { // Agrego , en caso de que el arreglo no estuviera vac�o
                                arregloParcial += ","; // Ejemplo: ["x",
                            }
                            arreglo = arregloParcial + arreglo; // Ejemplo: ["x","a","b"] � ["x"]
                            tipoValor.put(tipo, arreglo);
                            tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                            contadorPrograma += 3; // Quito el ID);
                        }
                        else{
                            respuesta+= "Error Semantico, "+nombrePush+" no existe.";
                            //i = arrPrint.size();
                            contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                            error = true;
                            // Ahora escribo el error en el archivo error.out
                            File f = new File("error.out");
                            try {
                                FileWriter fw = new FileWriter(f);
                                BufferedWriter bw = new BufferedWriter(fw);
                                PrintWriter pw = new PrintWriter(bw);
                                pw.write("Error Semantico, "+nombrePush+" no existe.");
                                pw.close();
                                bw.close();
                                fw.close();
                            } catch (IOException e) {
                                System.out.println("Error al escribir en el archivo error.out");
                            }
                            return;
                        }
                    } else {
                        actual = tablaAux.get(contadorPrograma); // Ejemplo: STRINGCOMPLEJO-"hola"
                        arrActual = actual.split("-"); // Ejemplo: [STRINGCOMPLEJO,"hola"]
                        String tipoPush = arrActual[0];
                        String valorPush = arrActual[1];
                        boolean vacio = false; // Para saber si el arreglo esta vacio o no
                        if (arreglo.equals("[]")) {
                            vacio = true;
                        }
                        arreglo = arreglo.substring(1); // Ejemplo: "a","b"] � ]
                        String arregloParcial = "[" + valorPush; // Ejemplo: ["x"
                        if (!vacio) { // Agrego , en caso de que el arreglo no estuviera vac�o
                            arregloParcial += ","; // Ejemplo: ["x",
                        }
                        arreglo = arregloParcial + arreglo; // Ejemplo: ["x","a","b"] � ["x"]
                        tipoValor.put(tipo, arreglo);
                        tablaSimbolos.put(nombre, tipoValor); // Modifico el arreglo en la tabla de simbolos
                        contadorPrograma += 3; // Quito el valor);
                    }
                }
                else{
                    respuesta+= "Error Semantico, "+nombre+" no existe.";
                    //i = arrPrint.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+nombre+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return;
                }
                break;

            case "BUCLEWHILE":
                ArrayList<String> condicionWhile = new ArrayList<>(); // Arreglo que guardara la condicion del while
                ArrayList<String> opWhile = new ArrayList<>(); // Arreglo que guardar� las instrucciones que estan
                                                                   // dentro del while
                contadorPrograma+=2; // Quito el while(
                while (!tablaAux.get(contadorPrograma).contains(")")){ // Guarda hasta encontrar el )
                    condicionWhile.add(tablaAux.get(contadorPrograma)); // Agrega a la condicion
                    contadorPrograma++; // Aumenta el contador de tokens o programa
                }
                contadorPrograma+=2; // Quito el ){
                while (!tablaAux.get(contadorPrograma).contains("}")){ // Guarda hasta encontrar el }
                    opWhile.add(tablaAux.get(contadorPrograma)); // Agrega a las operaciones del while
                    contadorPrograma++;
                }
                contadorPrograma+=1; // Quito el }
                evaluarBucle(condicionWhile, opWhile); // Eval�o el while
                aEnsamblador("WHILE",condicionWhile); // PARA PASAR EL IF-ELSE A ENSAMBLADOR
                break;

            case "BUCLEFOR":
                ArrayList<String> condicionFor = new ArrayList<>(); // Arreglo que guardara la condicion del while
                ArrayList<String> opFor = new ArrayList<>(); // Arreglo que guardar� las instrucciones que estan
                                                             // dentro del for
                contadorPrograma+=2; // Quito el for(
                contadorPrograma+=1; // Quito el my
                contadorPrograma+=1; // Quito el $
                actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                arrActual = actual.split("-"); //  Ejemplo: [ID,nombre]
                String k = "$"+arrActual[1]; // k seria el nombre de la variable. Por ejemplo: $nombre
                contadorPrograma+=1; // Quito el ID
                contadorPrograma+=1; // Quito la asignacion ( el = )
                actual = tablaAux.get(contadorPrograma); // Ejemplo: NUMERO-8 � STRINGCOMPLEJO-"hola"
                arrActual = actual.split("-"); // Ejemplo: [NUMERO,8] � [STRINGCOMPLEJO,"hola"]
                Hashtable<String,String> v = new Hashtable<>(); // v ser�a las otras dos partes necesarias para el simbolo
                v.put(arrActual[0],arrActual[1]); // Las cuales son tipo y valor
                if(!tablaSimbolos.containsKey(k)) {
                    tablaSimbolos.put(k, v); // Agrego la nueva variable a la tabla de simbolos
                    //}
                    // ------------------ PD: Falta manejar el error de re-definir variables -----------------------
                    contadorPrograma += 2; // Quito el valor; ( por ejemplo 8; )

                    while (!tablaAux.get(contadorPrograma).contains(";")) { // Guarda hasta encontrar el ;
                        condicionFor.add(tablaAux.get(contadorPrograma)); // Agrega a la condicion
                        contadorPrograma++; // Aumenta el contador de tokens o programa
                    }
                    contadorPrograma += 1; // Quito el ;
                    ArrayList<String> incrementador = new ArrayList<>(); // Arreglo para guardar la instruccion de incrementar
                    while (!tablaAux.get(contadorPrograma).contains(")")) { // Guarda hasta encontrar el )
                        incrementador.add(tablaAux.get(contadorPrograma)); // Agrega al incrementador
                        contadorPrograma++; // Aumenta el contador de tokens o programa
                    }
                    contadorPrograma += 2; // Quito el ){
                    cntLlaves = 1; // Contadores para evitar las llaves que no son del for
                    while (cntLlaves != 0) { // Guarda hasta encontrar el }
                        if (tablaAux.get(contadorPrograma).contains("{")) {
                            cntLlaves++;
                        }
                        if (tablaAux.get(contadorPrograma).contains("}")) {
                            cntLlaves--;
                        }
                        opFor.add(tablaAux.get(contadorPrograma)); // Agrega a las operaciones del for
                        contadorPrograma++;
                    }
                    contadorPrograma += 1; // Quito el }
                    for (int i = 0; i < incrementador.size(); i++) { // Agrego el incrementador como una operacion mas
                        opFor.add(incrementador.get(i)); // Haciendo el for como un while
                    }
                    evaluarBucle(condicionFor, opFor); // Eval�o el for
                    forAEnsamblador(condicionFor, incrementador, k); // PARA PASAR EL IF-ELSE A ENSAMBLADOR
                }
                else{
                    respuesta = "Error Semantico, la variable "+k+" ya existe";
                    contadorPrograma=tablaAux.size();
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try{
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, la variable "+k+" ya existe");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return;
                }
                break;

            case "CONDICIONSWITCH":
                contadorPrograma+=3; // Quito el switch($
                actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                arrActual = actual.split("-"); //  Ejemplo: [ID,nombre]
                k = "$"+arrActual[1]; // k seria el nombre de la variable. Por ejemplo: $nombre
                contadorPrograma+=2; // Quito el ID)
                if(tablaSimbolos.containsKey(k)) {
                    Hashtable<String, String> tipoValor = tablaSimbolos.get(k); // Saco el tipo y valor de la variable
                    Enumeration<String> keys = tipoValor.keys();               // que esta almacenado en la tabla de simbolos
                    contadorPrograma += 1; // Quito el {
                    ArrayList<String> opSwitch = new ArrayList<>(); // Aca se guardaran los casos del switch
                    cntLlaves = 1;
                    while (cntLlaves != 0) { // Guarda hasta encontrar el }
                        if (tablaAux.get(contadorPrograma).contains("{")) {
                            cntLlaves++;
                        }
                        if (tablaAux.get(contadorPrograma).contains("}")) {
                            cntLlaves--;
                        }
                        opSwitch.add(tablaAux.get(contadorPrograma)); // Agrega a los casos del switch
                        contadorPrograma++;
                    }
                    //contadorPrograma+=1; // Quito el } del switch CREO QUE ES INNCESARIO

                    evaluarSwitch(tipoValor, opSwitch);
                }
                else{
                    respuesta+= "Error Semantico, "+k+" no existe.";
                    //i = arrPrint.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+k+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return;
                }
                break;


            case "PRINT":
                contadorPrograma += 2; // Quito el print(
                ArrayList<String> arrPrint = new ArrayList<>();
                while (!tablaAux.get(contadorPrograma).contains(";")) {
                    arrPrint.add(tablaAux.get(contadorPrograma)); // Agrega lo que se a imprimir al print
                    contadorPrograma++;
                }
                arrPrint.remove(arrPrint.size()-1); // Quito el ) del arreglo del print
                evaluarPrint(arrPrint);
                contadorPrograma+=1; // Quito el ;
                break;

            case "DOLAR":
                contadorPrograma+=1; // Quito el $
                actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-contador
                arrActual = actual.split("-"); // Ejemplo: [ID,contador]
                k = "$"+arrActual[1]; // k ser�a el nombre de la variable. Por ejemplo: $contador
                if(tablaSimbolos.containsKey(k)) {
                    contadorPrograma += 1; // Quito el ID
                    if (tablaAux.get(contadorPrograma).contains("MASMAS")) { // Si encuentro un ++
                        Hashtable<String, String> tipoValor = tablaSimbolos.get(k);
                        Enumeration<String> keys = tipoValor.keys();
                        String tipo = keys.nextElement();
                        int valor = Integer.parseInt(tipoValor.get(tipo)); // valor es el valor de la variable almacenado
                        valor++; // Aumento ese valor por ser un ++
                        tipoValor.put(tipo, String.valueOf(valor)); // Agrego nuevamente el valor a tipoValor
                        Hashtable<String, Hashtable<String, String>> nuevo = new Hashtable<>();
                        nuevo.put(k, tipoValor);
                        tablaSimbolos.putAll(nuevo); // Modifico el elemento en la tabla de simbolos
                    } else if (tablaAux.get(contadorPrograma).contains("MENOSMENOS")) { // Si encuentro un --
                        Hashtable<String,String> tipoValor = tablaSimbolos.get(k);
                        Enumeration<String> keys = tipoValor.keys();
                        String tipo = keys.nextElement();
                        int valor = Integer.parseInt(tipoValor.get(tipo));  // valor almacenado
                        valor--; // Decremento el valor por ser --
                        tipoValor.put(tipo, String.valueOf(valor)); // Agrego el valor nuevo a tipoValor
                        Hashtable<String, Hashtable<String, String>> nuevo = new Hashtable<>();
                        nuevo.put(k, tipoValor);
                        tablaSimbolos.putAll(nuevo); // Modifico en la tabla de simbolos
                    } else { // Cuando encuentro una asignacion
                        contadorPrograma += 1; // Quito el =
                        Hashtable<String,String> tipoValor = tablaSimbolos.get(k);
                        Enumeration<String> keys = tipoValor.keys();
                        String tipo = keys.nextElement();
                        Object valor;
                        ArrayList<String> opAsignacion = new ArrayList<>();
                        while (!tablaAux.get(contadorPrograma).contains(";")) {  // Guardo la asignacion para ser evaluada
                            opAsignacion.add(tablaAux.get(contadorPrograma));
                            contadorPrograma++;
                        }
                        opAsignacion.add(tablaAux.get(contadorPrograma)); // Agrego el ; a la asignacion para ayuda
                        contadorPrograma += 1; // Quito el ;

                        valor = evaluarAsignacion(tipo, opAsignacion); // Nuevo valor de la variable
                        if(String.valueOf(valor).equals("Error")){ // En caso de error, borrar este if.
                            error = true;
                            contadorPrograma=tablaAux.size();
                            return;
                        }
                        tipoValor.put(tipo, String.valueOf(valor));

                        Hashtable<String, Hashtable<String, String>> nuevo = new Hashtable<>();
                        nuevo.put(k, tipoValor);
                        tablaSimbolos.putAll(nuevo); // Modifico en la tabla de simbolos
                    }
                }
                else{
                    respuesta+= "Error Semantico, "+k+" no existe.";
                    //i = arrPrint.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, "+k+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return;
                }
                break;

            case "FUN":
                contadorPrograma+=1; // Quito el fun
                actual = tablaAux.get(contadorPrograma); // Ejemplo: ID-nombre
                arrActual = actual.split("-"); // Ejemplo: [ID,nombre]
                String nombreFun = arrActual[1]; // Nombre de la funcion
                if(funciones.containsKey(nombreFun)) {
                    Hashtable<ArrayList<String>, ArrayList<String>> paramOp = funciones.get(nombreFun);
                    Enumeration<ArrayList<String>> funKeys = paramOp.keys();
                    ArrayList<String> parametros = funKeys.nextElement();
                    ArrayList<String> operaciones = paramOp.get(parametros);
                    ArrayList<String> paramLlamado = new ArrayList<>();
                    contadorPrograma += 2; // Quito el ID(
                    while (!tablaAux.get(contadorPrograma).contains(")")) {
                        paramLlamado.add(tablaAux.get(contadorPrograma));
                        contadorPrograma++;
                    }
                    contadorPrograma += 2; // Quito el );
                    iniciarParametros(parametros, paramLlamado, operaciones);
                }
                else{
                    respuesta+= "Error Semantico, la funcion "+nombreFun+" no existe.";
                    //i = arrPrint.size();
                    contadorPrograma = tablaAux.size(); // ESTO PODRIA ESTAR MAL
                    error = true;
                    // Ahora escribo el error en el archivo error.out
                    File f = new File("error.out");
                    try {
                        FileWriter fw = new FileWriter(f);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter pw = new PrintWriter(bw);
                        pw.write("Error Semantico, la funcion "+nombreFun+" no existe.");
                        pw.close();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        System.out.println("Error al escribir en el archivo error.out");
                    }
                    return;
                }

                break;

            case "BUCLEFOREACH":
                contadorPrograma+=2; // Quito el foreach(
                ArrayList<String> condicionForeach = new ArrayList<>();
                ArrayList<String> opForeach = new ArrayList<>();
                while (!tablaAux.get(contadorPrograma).contains("{")){
                    condicionForeach.add(tablaAux.get(contadorPrograma));
                    contadorPrograma++;
                }
                condicionForeach.remove(condicionForeach.size()-1); // Quito el )
                contadorPrograma+=1; // Quito el {
                cntLlaves = 1;
                while (cntLlaves!=0){ // Guarda hasta encontrar el }
                    if (tablaAux.get(contadorPrograma).contains("{")){
                        cntLlaves++;
                    }
                    if (tablaAux.get(contadorPrograma).contains("}")){
                        cntLlaves--;
                    }
                    opForeach.add(tablaAux.get(contadorPrograma)); // Agrega a los casos del switch
                    contadorPrograma++;
                }

                evaluarForeach(condicionForeach,opForeach);
                break;

            case "BUCLEDO":
                ArrayList<String> condicionDowhile = new ArrayList<>(); // Arreglo que guardara la condicion del DoWhile
                ArrayList<String> opDowhile = new ArrayList<>(); // Arreglo que guardara las instrucciones que estan
                                                                 // dentro del DoWhile
                contadorPrograma+=2; // Quito el do{
                cntLlaves = 1;
                while (cntLlaves!=0){ // Guarda hasta encontrar el }
                    if (tablaAux.get(contadorPrograma).contains("{")){
                        cntLlaves++;
                    }
                    if (tablaAux.get(contadorPrograma).contains("}")){
                        cntLlaves--;
                    }
                    opDowhile.add(tablaAux.get(contadorPrograma)); // Agrega a las instrucciones del DoWhile
                    contadorPrograma++;
                }
                contadorPrograma+=2; // Quito el while(
                while(!tablaAux.get(contadorPrograma).contains(";")){
                    condicionDowhile.add(tablaAux.get(contadorPrograma));
                    contadorPrograma++;
                }
                condicionDowhile.remove(condicionDowhile.size()-1); // Quito el )
                contadorPrograma+=1; // Quito el ;
                calcularResultadoBucle(opDowhile); // Ejecuto la primera vez
                evaluarBucle(condicionDowhile, opDowhile); // Eval�o el DoWhile
                break;

            default:
                contadorPrograma+=1;
                break;
        }
        //}
    }

    //------------------------------------------------------------------------------------------------------------------

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmInterfazAsintactico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmInterfazAsintactico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmInterfazAsintactico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmInterfazAsintactico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmInterfazAsintactico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnResultado;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnTablaSimbolos;
    private javax.swing.JButton btnVerErrores;
    private javax.swing.JButton btnVerListaTokens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txaResultado;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables
    private Hashtable<String,Hashtable<String,String>> tablaSimbolos = new Hashtable<>();
    private ArrayList<String> tablaAux = new ArrayList<>();
    private Hashtable<String,Hashtable<ArrayList<String>,ArrayList<String>>> funciones = new Hashtable<>();

    private String respuesta = "";
    private int contadorPrograma = 0;
    private boolean error = false;

}
