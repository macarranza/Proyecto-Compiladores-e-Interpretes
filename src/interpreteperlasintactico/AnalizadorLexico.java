/* The following code was generated by JFlex 1.5.0-SNAPSHOT */


/* --------------------------Codigo de Usuario----------------------- */
package interpreteperlasintactico;

import java_cup.runtime.*;
import java.io.Reader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna)
    {
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }
    //Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token #"+numToken+": "+token+"  "+tipo+" ["+(linea+1)
        + "," +(columna+1) + "]";
    }
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>alexico.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\12\1\13\1\1\22\0\1\3\1\15\1\7"+
    "\1\0\1\36\1\10\1\16\1\0\1\25\1\26\1\21\1\20\1\34"+
    "\1\22\1\0\1\11\1\4\11\5\1\35\1\33\1\23\1\14\1\24"+
    "\1\0\1\37\32\6\1\27\1\0\1\30\1\10\2\0\1\55\1\63"+
    "\1\53\1\56\1\46\1\42\1\62\1\54\1\45\1\65\1\64\1\47"+
    "\1\40\1\44\1\57\1\61\1\6\1\60\1\50\1\52\1\43\1\6"+
    "\1\51\1\6\1\41\1\6\1\31\1\17\1\32\7\0\1\12\32\0"+
    "\1\10\u15df\0\1\10\u097f\0\13\10\35\0\1\12\1\12\5\0\1\10"+
    "\57\0\1\10\u0fa0\0\1\10\ucfff\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\16\4\1\0\1\31\1\0\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\3\4\1\44\10\4\1\45\6\4\1\46\1\47"+
    "\13\4\1\50\6\4\1\51\5\4\1\52\2\4\1\53"+
    "\2\4\1\54\2\4\1\55\2\4\1\56\1\57\1\60"+
    "\2\4\1\61\1\62\2\4\1\63\1\64\1\4\1\65"+
    "\1\66\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\66\0\242\0\330\0\u010e"+
    "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0144\0\u0288"+
    "\0\u02be\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\u02f4\0\u032a\0\u0360"+
    "\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510"+
    "\0\u0546\0\u057c\0\u05b2\0\u010e\0\66\0\u0144\0\u0144\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\330"+
    "\0\u05e8\0\u061e\0\u0654\0\330\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\330\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\330\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\330\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\330"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\330\0\u0e58\0\u0e8e"+
    "\0\330\0\u0ec4\0\u0efa\0\330\0\u0f30\0\u0f66\0\330\0\u0f9c"+
    "\0\u0fd2\0\330\0\330\0\330\0\u1008\0\u103e\0\330\0\330"+
    "\0\u1074\0\u10aa\0\330\0\330\0\u10e0\0\330\0\330\0\330"+
    "\0\330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\2\1\4\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\7\1\37\1\40\1\7\1\41\1\42\1\43\1\44"+
    "\1\45\1\7\1\46\2\7\1\47\1\7\1\50\1\51"+
    "\1\7\1\52\1\7\1\53\70\0\1\4\67\0\2\6"+
    "\64\0\3\7\31\0\26\7\1\0\6\54\1\55\4\54"+
    "\2\0\1\54\1\0\3\54\13\0\30\54\1\56\2\0"+
    "\6\56\1\57\2\0\5\56\1\57\44\56\14\0\1\60"+
    "\7\0\1\61\55\0\1\62\67\0\1\63\66\0\1\64"+
    "\66\0\1\65\67\0\1\66\57\0\1\67\55\0\3\7"+
    "\31\0\1\7\1\70\24\7\4\0\3\7\31\0\3\7"+
    "\1\71\13\7\1\72\6\7\4\0\3\7\31\0\4\7"+
    "\1\73\21\7\4\0\3\7\31\0\2\7\1\74\23\7"+
    "\4\0\3\7\31\0\7\7\1\75\16\7\4\0\3\7"+
    "\31\0\6\7\1\76\17\7\4\0\3\7\31\0\11\7"+
    "\1\77\2\7\1\100\4\7\1\101\4\7\4\0\3\7"+
    "\31\0\14\7\1\102\11\7\4\0\3\7\31\0\15\7"+
    "\1\103\10\7\4\0\3\7\31\0\6\7\1\104\10\7"+
    "\1\105\6\7\4\0\3\7\31\0\6\7\1\106\17\7"+
    "\4\0\3\7\31\0\3\7\1\107\13\7\1\110\1\111"+
    "\5\7\4\0\3\7\31\0\20\7\1\112\5\7\4\0"+
    "\3\7\31\0\17\7\1\113\6\7\4\0\3\7\31\0"+
    "\4\7\1\114\21\7\4\0\3\7\31\0\20\7\1\115"+
    "\5\7\4\0\3\7\31\0\10\7\1\116\15\7\4\0"+
    "\3\7\31\0\10\7\1\117\15\7\4\0\3\7\31\0"+
    "\4\7\1\120\21\7\4\0\3\7\31\0\5\7\1\121"+
    "\20\7\4\0\3\7\31\0\5\7\1\122\20\7\4\0"+
    "\3\7\31\0\7\7\1\123\16\7\4\0\3\7\31\0"+
    "\5\7\1\124\20\7\4\0\3\7\31\0\10\7\1\125"+
    "\15\7\4\0\3\7\31\0\2\7\1\126\23\7\4\0"+
    "\3\7\31\0\12\7\1\127\13\7\4\0\3\7\31\0"+
    "\10\7\1\130\15\7\4\0\3\7\31\0\21\7\1\131"+
    "\4\7\4\0\3\7\31\0\5\7\1\132\20\7\4\0"+
    "\3\7\31\0\6\7\1\133\17\7\4\0\3\7\31\0"+
    "\5\7\1\134\20\7\4\0\3\7\31\0\6\7\1\135"+
    "\17\7\4\0\3\7\31\0\14\7\1\136\11\7\4\0"+
    "\3\7\31\0\5\7\1\137\1\140\17\7\4\0\3\7"+
    "\31\0\22\7\1\141\3\7\4\0\3\7\31\0\12\7"+
    "\1\142\13\7\4\0\3\7\31\0\2\7\1\143\23\7"+
    "\4\0\3\7\31\0\5\7\1\144\20\7\4\0\3\7"+
    "\31\0\7\7\1\145\16\7\4\0\3\7\31\0\6\7"+
    "\1\146\17\7\4\0\3\7\31\0\15\7\1\147\10\7"+
    "\4\0\3\7\31\0\3\7\1\150\22\7\4\0\3\7"+
    "\31\0\14\7\1\151\11\7\4\0\3\7\31\0\4\7"+
    "\1\152\21\7\4\0\3\7\31\0\15\7\1\153\10\7"+
    "\4\0\3\7\31\0\4\7\1\154\21\7\4\0\3\7"+
    "\31\0\15\7\1\155\10\7\4\0\3\7\31\0\5\7"+
    "\1\156\20\7\4\0\3\7\31\0\2\7\1\157\23\7"+
    "\4\0\3\7\31\0\12\7\1\160\13\7\4\0\3\7"+
    "\31\0\13\7\1\161\12\7\4\0\3\7\31\0\12\7"+
    "\1\162\13\7\4\0\3\7\31\0\12\7\1\163\13\7"+
    "\4\0\3\7\31\0\6\7\1\164\17\7\4\0\3\7"+
    "\31\0\3\7\1\165\22\7\4\0\3\7\31\0\20\7"+
    "\1\166\5\7\4\0\3\7\31\0\12\7\1\167\13\7"+
    "\4\0\3\7\31\0\24\7\1\170\1\7\4\0\3\7"+
    "\31\0\13\7\1\171\12\7\4\0\3\7\31\0\2\7"+
    "\1\172\23\7\4\0\3\7\31\0\14\7\1\173\11\7"+
    "\4\0\3\7\31\0\14\7\1\174\11\7\4\0\3\7"+
    "\31\0\7\7\1\175\16\7\4\0\3\7\31\0\4\7"+
    "\1\176\21\7\4\0\3\7\31\0\14\7\1\177\11\7"+
    "\4\0\3\7\31\0\12\7\1\200\13\7\4\0\3\7"+
    "\31\0\12\7\1\201\13\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4374];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\14\1\14\11\16\1\1\0"+
    "\1\11\1\0\1\1\10\11\112\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


    private int contador;
    private ArrayList<Yytoken> tokens;
    
    private void writeOutputFile(String file,Yytoken t) throws IOException
        {
            String filename = file;
            BufferedWriter out = new BufferedWriter(new FileWriter(filename,true));
           // System.out.println("\n*** Tokens guardados en archivo ***\n");
            
                System.out.println(t);
                out.write(t + "\n");
            
            out.close();
	}

        private void writeOutputFileError(String file,String error) throws IOException
        {
            String filenameerror = file;
            BufferedWriter out = new BufferedWriter(new FileWriter(filenameerror,true));
            //System.out.println("\n*** Tokens guardados en archivo ***\n");
            
            out.write(error + "\n");
            out.close();
            
	}

//Obtenemos lista de tokens
        public ArrayList<Yytoken> getListaTokens() throws IOException
        {
            System.out.println("\n*** Lista***\n");
            for(Yytoken t: this.tokens)
            {
                System.out.println(t);
                
            }
            return this.tokens;
	}





    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        
        return new Symbol(type, yyline, yycolumn, value);
    }
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
      try {
          contador = 0;
          tokens = new ArrayList<Yytoken>();
          BufferedWriter out = new BufferedWriter(new FileWriter("file.out"));
           out.close();

           BufferedWriter outError = new BufferedWriter(new FileWriter("error.out"));
           outError.close();
          
      } catch (IOException ex) 
        {
          System.out.println("error: "+ex);
        } 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	/*try
        {
            this.writeOutputFile("file.out");
            //System.exit(0);
	}
        catch(IOException ioe)
        {
            ioe.printStackTrace();
	}*/
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),
                            "Error Lexico, caracter desconocido: "+yytext()+" , en la linea "+(yyline+1) +" y la columna "+(yycolumn+1),
                            yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            
                            this.writeOutputFileError("error.out",
                            "Error Lexico, caracter desconocido: "+yytext()+"  ,en la linea "+(yyline+1) +" y la columna "+(yycolumn+1));
                            //return symbol(sym.error);
                            //throw new Error("Caracter ilegal <"+yytext()+">");
          }
        case 57: break;
        case 2: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"ESPACIO",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            //writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(yytext()); 
                            return symbol(sym.ESPACIO,new String(yytext()));
          }
        case 58: break;
        case 3: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"NUMERO",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(yytext()+" "); 
                            return symbol(sym.NUMERO, new Integer(yytext()));
          }
        case 59: break;
        case 4: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"ID",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(yytext()); 
                            return symbol(sym.ID,new String(yytext()));
          }
        case 60: break;
        case 5: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"DIV",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" / ");
                            return symbol(sym.DIV);
          }
        case 61: break;
        case 6: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"ASIGNACION",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" = ");
                            return symbol(sym.ASIGNACION);
          }
        case 62: break;
        case 7: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"AND",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" & ");
                            return symbol(sym.AND);
          }
        case 63: break;
        case 8: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"OR",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" | ");
                            return symbol(sym.OR);
          }
        case 64: break;
        case 9: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MAS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" + ");
                            return symbol(sym.MAS);
          }
        case 65: break;
        case 10: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MULTI",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" * ");
                            return symbol(sym.MULTI);
          }
        case 66: break;
        case 11: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MENOS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" - ");
                            return symbol(sym.MENOS);
          }
        case 67: break;
        case 12: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MENORQUE",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" < ");
                            return symbol(sym.MENORQUE);
          }
        case 68: break;
        case 13: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MAYORQUE",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" > ");
                            return symbol(sym.MAYORQUE);
          }
        case 69: break;
        case 14: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"ABRIRPARENTESIS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" ( ");
                            return symbol(sym.ABRIRPARENTESIS);
          }
        case 70: break;
        case 15: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CERRARPARENTESIS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" ) ");
                            return symbol(sym.CERRARPARENTESIS);
          }
        case 71: break;
        case 16: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"ABRIRBRACKETS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" [ \n");
                            return symbol(sym.ABRIRBRACKETS);
          }
        case 72: break;
        case 17: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CERRARBRACKETS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" ]\n ");
                            return symbol(sym.CERRARBRACKETS);
          }
        case 73: break;
        case 18: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"ABRIRLLAVES",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" {\n ");
                            return symbol(sym.ABRIRLLAVES);
          }
        case 74: break;
        case 19: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CERRARLLAVES",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("}\n");
                            return symbol(sym.CERRARLLAVES);
          }
        case 75: break;
        case 20: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"PUNTOCOMA",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" ;\n");
                            return symbol(sym.PUNTOCOMA);
          }
        case 76: break;
        case 21: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"COMA",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" , ");
                            return symbol(sym.COMA);
          }
        case 77: break;
        case 22: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"DOSPUNTOS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(": ");
                            return symbol(sym.DOSPUNTOS);
          }
        case 78: break;
        case 23: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"DOLAR",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" $");
                            return symbol(sym.DOLAR);
          }
        case 79: break;
        case 24: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"AT",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" @");
                            return symbol(sym.AT);
          }
        case 80: break;
        case 25: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"STRINGCOMPLEJO",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(yytext()); 
                            return symbol(sym.STRINGCOMPLEJO,new String(yytext()));
          }
        case 81: break;
        case 26: 
          { /*ignorar el comentario*/
          }
        case 82: break;
        case 27: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"EQUIVALENCIA",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" == ");
                            return symbol(sym.EQUIVALENCIA);
          }
        case 83: break;
        case 28: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MAYORIGUALQUE",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" => ");
                            return symbol(sym.MAYORIGUALQUE);
          }
        case 84: break;
        case 29: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"DIFERENCIA",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" != ");
                            return symbol(sym.DIFERENCIA);
          }
        case 85: break;
        case 30: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"ANDAND",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" && ");
                            return symbol(sym.ANDAND);
          }
        case 86: break;
        case 31: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"OROR",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" || ");
                            return symbol(sym.OROR);
          }
        case 87: break;
        case 32: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MASMAS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" ++ ");
                            return symbol(sym.MASMAS);
          }
        case 88: break;
        case 33: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MENOSMENOS",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" -- ");
                            return symbol(sym.MENOSMENOS);
          }
        case 89: break;
        case 34: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MENORIGUALQUE",yyline,yycolumn);
                            tokens.add(t);
                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print(" <= ");
                            return symbol(sym.MENORIGUALQUE);
          }
        case 90: break;
        case 35: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"MY",yyline,yycolumn);
                            tokens.add(t);

                            /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("MY");
                            return symbol(sym.MY);
          }
        case 91: break;
        case 36: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CONDICIONIF",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("CONDICIONIF");
                            return symbol(sym.CONDICIONIF);
          }
        case 92: break;
        case 37: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"BUCLEDO",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("BUCLEDO");
                            return symbol(sym.BUCLEDO);
          }
        case 93: break;
        case 38: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"FUN",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("FUN");
                            return symbol(sym.FUN);
          }
        case 94: break;
        case 39: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"BUCLEFOR",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("BUCLEFOR");
                            return symbol(sym.BUCLEFOR);
          }
        case 95: break;
        case 40: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"POP",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("POP");
                            return symbol(sym.POP);
          }
        case 96: break;
        case 41: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CONDICIONELSE",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("CONDICIONELSE");
                            return symbol(sym.CONDICIONELSE);
          }
        case 97: break;
        case 42: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CONDICIONCASE",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("CONDICIONCASE");
                            return symbol(sym.CONDICIONCASE);
          }
        case 98: break;
        case 43: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"PUSH",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("PUSH");
                            return symbol(sym.PUSH);
          }
        case 99: break;
        case 44: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"JOIN",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("JOIN");
                            return symbol(sym.JOIN);
          }
        case 100: break;
        case 45: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CONDICIONELSIF",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("CONDICIONELSIF");
                            return symbol(sym.CONDICIONELSIF);
          }
        case 101: break;
        case 46: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"SHIFT",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("SHIFT");
                            return symbol(sym.SHIFT);
          }
        case 102: break;
        case 47: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"SPLIT",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("SPLIT");
                            return symbol(sym.SPLIT);
          }
        case 103: break;
        case 48: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"BUCLEWHILE",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("BUCLEWHILE");
                            return symbol(sym.BUCLEWHILE);
          }
        case 104: break;
        case 49: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"PRINT",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("PRINT");
                            return symbol(sym.PRINT);
          }
        case 105: break;
        case 50: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"BREAK",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("BREAK");
                            return symbol(sym.BREAK);
          }
        case 106: break;
        case 51: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"LARGOLISTA",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("LARGOLISTA");
                            return symbol(sym.LARGOLISTA);
          }
        case 107: break;
        case 52: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CONDICIONSWITCH",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("CONDICIONSWITCH");
                            return symbol(sym.CONDICIONSWITCH);
          }
        case 108: break;
        case 53: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"RETORNO",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("RETORNO");
                            return symbol(sym.RETORNO);
          }
        case 109: break;
        case 54: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"BUCLEFOREACH",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("BUCLEFOREACH");
                            return symbol(sym.BUCLEFOREACH);
          }
        case 110: break;
        case 55: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"UNSHIFT",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("UNSHIFT");
                            return symbol(sym.UNSHIFT);
          }
        case 111: break;
        case 56: 
          { contador++;
                            Yytoken t = new Yytoken(contador,yytext(),"CONDICIONDEFAULT",yyline,yycolumn);
                            tokens.add(t);
                             /*----------------- SAVE ----------------------*/
                            writeOutputFile("file.out",t);
                            /*---------------------------------------------*/
                            //System.out.print("CONDICIONDEFAULT");
                            return symbol(sym.CONDICIONDEFAULT);
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
